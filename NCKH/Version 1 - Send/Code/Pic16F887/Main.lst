CCS PCM C Compiler, Version 4.084, 36728               26-Aug-15 20:34

               Filename: Main.lst

               ROM used: 3702 words (45%)
                         Largest free fragment is 2048
               RAM used: 143 (39%) at main() level
                         155 (42%) worst case
               Stack:    8 worst case (7 in main + 1 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   060
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   1E6
.................... #include <16F887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device *=16 adc=8 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=4000000) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #include<lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=4000000) 
*
0272:  MOVLW  9F
0273:  MOVWF  04
0274:  BSF    03.7
0275:  MOVF   00,W
0276:  BTFSC  03.2
0277:  GOTO   286
0278:  MOVLW  01
0279:  MOVWF  78
027A:  CLRF   77
027B:  DECFSZ 77,F
027C:  GOTO   27B
027D:  DECFSZ 78,F
027E:  GOTO   27A
027F:  MOVLW  4A
0280:  MOVWF  77
0281:  DECFSZ 77,F
0282:  GOTO   281
0283:  GOTO   284
0284:  DECFSZ 00,F
0285:  GOTO   278
0286:  RETLW  00
.................... void lcd_init(void); 				// Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);			// Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);			// Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);	// Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);		// Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);	// Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);		// Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);				// Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... #define LCD_RS_PIN 	  		PIN_D1	// Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      	PIN_D2 
.................... #define LCD_ENABLE_PIN  	PIN_D3 
.................... #define LCD_DATA4       	PIN_D4 
.................... #define LCD_DATA5       	PIN_D5 
.................... #define LCD_DATA6       	PIN_D6 
.................... #define LCD_DATA7       	PIN_D7  
.................... /* 
.................... #define LCD_RS_PIN 	  		PIN_C5	// Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      	PIN_C6 
.................... #define LCD_ENABLE_PIN  	PIN_C7 
.................... #define LCD_DATA4       	PIN_D4 
.................... #define LCD_DATA5       	PIN_D5 
.................... #define LCD_DATA6       	PIN_D6 
.................... #define LCD_DATA7       	PIN_D7   
.................... */ 
.................... /* 
.................... #define LCD_RS_PIN 	  	PIN_D1	// Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7   
.................... */ 
.................... #define lcd_output_enable(x)	output_bit(LCD_ENABLE_PIN, x)	// Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()	output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)	output_bit(LCD_RS_PIN, x)	// Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()		output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)	output_bit(LCD_RW_PIN, x)	// Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()		output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one	0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two	0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three	0x14 
.................... #define lcd_line_four	0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
.................... 		// Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
.................... 		//			0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
.................... 			// Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
.................... 			// Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
.................... 			// Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
.................... 		// Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
.................... 		//			0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
.................... 		// Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
.................... 		// Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
.................... 		//			0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
.................... 		// Byte 5: .... - Doi con tro / hien thi. 
.................... 		//			0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void) 	// Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);	// Thiet lap chan port (Data) o che do ngo ra. 
*
0407:  BSF    03.5
0408:  BCF    08.4
.................... output_drive(LCD_DATA5); 
0409:  BCF    08.5
.................... output_drive(LCD_DATA6); 
040A:  BCF    08.6
.................... output_drive(LCD_DATA7); 
040B:  BCF    08.7
....................  
.................... lcd_enable_tris();			// Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
040C:  BCF    08.3
.................... lcd_rs_tris(); 
040D:  BCF    08.1
.................... lcd_rw_tris(); 
040E:  BCF    08.2
....................  
.................... lcd_output_rs(0);			// RS = 0 - Databus = Bus lenh. 
040F:  BCF    03.5
0410:  BCF    08.1
0411:  BSF    03.5
0412:  BCF    08.1
.................... lcd_output_rw(0);			// RW = 0 - Ghi thong tin vao C.LCD. 
0413:  BCF    03.5
0414:  BCF    08.2
0415:  BSF    03.5
0416:  BCF    08.2
.................... lcd_output_enable(0);		// EN = 0 - Cam truy xuat C.LCD. 
0417:  BCF    03.5
0418:  BCF    08.3
0419:  BSF    03.5
041A:  BCF    08.3
....................  
.................... delay_ms(15);	// Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
041B:  MOVLW  0F
041C:  BSF    03.6
041D:  MOVWF  1F
041E:  BCF    03.5
041F:  BCF    03.6
0420:  CALL   272
....................  
.................... for(i=1;i<=3;i++)			// Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
0421:  MOVLW  01
0422:  BSF    03.6
0423:  MOVWF  6A
0424:  MOVF   6A,W
0425:  SUBLW  03
0426:  BTFSS  03.0
0427:  GOTO   438
.................... 	{						// tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
.................... 	lcd_send_nibble(0x03); 	// truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
0428:  MOVLW  03
0429:  BSF    03.5
042A:  MOVWF  26
042B:  BCF    03.5
042C:  BCF    03.6
042D:  CALL   287
.................... 	delay_ms(5);			// RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
042E:  MOVLW  05
042F:  BSF    03.5
0430:  BSF    03.6
0431:  MOVWF  1F
0432:  BCF    03.5
0433:  BCF    03.6
0434:  CALL   272
.................... 	}						// Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
0435:  BSF    03.6
0436:  INCF   6A,F
0437:  GOTO   424
.................... 							// thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);		// Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
0438:  MOVLW  02
0439:  BSF    03.5
043A:  MOVWF  26
043B:  BCF    03.5
043C:  BCF    03.6
043D:  CALL   287
.................... 							// ra truoc tien, sau do la 4 bit thap. 
.................... 							// RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
.................... 							// Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
043E:  BSF    03.6
043F:  CLRF   6A
0440:  MOVF   6A,W
0441:  SUBLW  03
0442:  BTFSS  03.0
0443:  GOTO   455
.................... 	lcd_send_byte(0,LCD_INIT_STRING[i]);	// Goi ham truyen thong tin (lenh) sang C.LCD. 
0444:  MOVF   6A,W
0445:  BCF    03.6
0446:  CALL   035
0447:  BSF    03.6
0448:  MOVWF  6B
0449:  BSF    03.5
044A:  CLRF   23
044B:  BCF    03.5
044C:  MOVF   6B,W
044D:  BSF    03.5
044E:  MOVWF  24
044F:  BCF    03.5
0450:  BCF    03.6
0451:  CALL   309
0452:  BSF    03.6
0453:  INCF   6A,F
0454:  GOTO   440
.................... }											// Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)	// Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);	// Thiet lap chan port o che do ngo vao. 
*
030C:  BSF    08.4
.................... output_float(LCD_DATA5); 
030D:  BSF    08.5
.................... output_float(LCD_DATA6); 
030E:  BSF    08.6
.................... output_float(LCD_DATA7); 
030F:  BSF    08.7
....................  
.................... lcd_output_rw(1);			// RW = 1 - Doc thong tin tu C.LCD. 
0310:  BCF    03.5
0311:  BSF    08.2
0312:  BSF    03.5
0313:  BCF    08.2
.................... 						// Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);			// Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0314:  NOP
.................... lcd_output_enable(1);		// EN = 1 - Cho phep truy xuat C.LCD. 
0315:  BCF    03.5
0316:  BSF    08.3
0317:  BSF    03.5
0318:  BCF    08.3
.................... delay_cycles(1);			// Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0319:  NOP
.................... high = lcd_read_nibble();	// Cat tam 4 bit du lieu (4 bit cao). 
031A:  BCF    03.5
031B:  CALL   2CC
031C:  MOVF   78,W
031D:  BSF    03.5
031E:  BSF    03.6
031F:  MOVWF  26
.................... lcd_output_enable(0);		// EN = 0 - Cam truy xuat C.LCD. 
0320:  BCF    03.5
0321:  BCF    03.6
0322:  BCF    08.3
0323:  BSF    03.5
0324:  BCF    08.3
.................... 						// Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);			// Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0325:  NOP
.................... lcd_output_enable(1);		// EN = 1 - Cho phep truy xuat C.LCD. 
0326:  BCF    03.5
0327:  BSF    08.3
0328:  BSF    03.5
0329:  BCF    08.3
.................... delay_cycles(1);			// Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
032A:  NOP
.................... low = lcd_read_nibble();	// Cat tam 4 bit du lieu (4 bit thap). 
032B:  BCF    03.5
032C:  CALL   2CC
032D:  MOVF   78,W
032E:  BSF    03.5
032F:  BSF    03.6
0330:  MOVWF  25
.................... lcd_output_enable(0);		// EN = 0 - Cam truy xuat C.LCD. 
0331:  BCF    03.5
0332:  BCF    03.6
0333:  BCF    08.3
0334:  BSF    03.5
0335:  BCF    08.3
....................  
.................... output_drive(LCD_DATA4);	// Thiet lap chan port o che do ngo ra. 
0336:  BCF    08.4
.................... output_drive(LCD_DATA5); 
0337:  BCF    08.5
.................... output_drive(LCD_DATA6); 
0338:  BCF    08.6
.................... output_drive(LCD_DATA7); 
0339:  BCF    08.7
....................  
.................... return((high<<4) | low);	// Tra ve ket qua du lieu (dang 8 bit). 
033A:  BSF    03.6
033B:  SWAPF  26,W
033C:  MOVWF  77
033D:  MOVLW  F0
033E:  ANDWF  77,F
033F:  MOVF   77,W
0340:  IORWF  25,W
0341:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)	// Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;	// Mac dinh gia tri ban dau cho noi chua se thong tin. 
*
02CC:  BSF    03.5
02CD:  BSF    03.6
02CE:  CLRF   27
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);			// Doc lan luot cac bit tu bus du lieu. 
02CF:  BCF    03.6
02D0:  BSF    08.4
02D1:  MOVLW  00
02D2:  BCF    03.5
02D3:  BTFSC  08.4
02D4:  MOVLW  01
02D5:  BSF    03.5
02D6:  BSF    03.6
02D7:  IORWF  27,F
.................... n |= input(LCD_DATA5) << 1; 
02D8:  BCF    03.6
02D9:  BSF    08.5
02DA:  MOVLW  00
02DB:  BCF    03.5
02DC:  BTFSC  08.5
02DD:  MOVLW  01
02DE:  MOVWF  77
02DF:  BCF    03.0
02E0:  RLF    77,F
02E1:  MOVF   77,W
02E2:  BSF    03.5
02E3:  BSF    03.6
02E4:  IORWF  27,F
.................... n |= input(LCD_DATA6) << 2; 
02E5:  BCF    03.6
02E6:  BSF    08.6
02E7:  MOVLW  00
02E8:  BCF    03.5
02E9:  BTFSC  08.6
02EA:  MOVLW  01
02EB:  MOVWF  77
02EC:  RLF    77,F
02ED:  RLF    77,F
02EE:  MOVLW  FC
02EF:  ANDWF  77,F
02F0:  MOVF   77,W
02F1:  BSF    03.5
02F2:  BSF    03.6
02F3:  IORWF  27,F
.................... n |= input(LCD_DATA7) << 3; 
02F4:  BCF    03.6
02F5:  BSF    08.7
02F6:  MOVLW  00
02F7:  BCF    03.5
02F8:  BTFSC  08.7
02F9:  MOVLW  01
02FA:  MOVWF  77
02FB:  RLF    77,F
02FC:  RLF    77,F
02FD:  RLF    77,F
02FE:  MOVLW  F8
02FF:  ANDWF  77,F
0300:  MOVF   77,W
0301:  BSF    03.5
0302:  BSF    03.6
0303:  IORWF  27,F
....................  
.................... return(n);	// Tra ve ket qua doc duoc (data = 0000 xxxx). 
0304:  MOVF   27,W
0305:  MOVWF  78
.................... } 
0306:  BCF    03.5
0307:  BCF    03.6
0308:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)	// Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {											// address = 0: Lenh / 1: Du lieu. 
.................... 											// byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);		// RS = 0 - Databus = Bus lenh. 
0309:  BCF    08.1
030A:  BSF    03.5
030B:  BCF    08.1
.................... while(bit_test(lcd_read_byte(),7));	// Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
0342:  MOVF   78,W
0343:  MOVWF  25
0344:  BTFSS  25.7
0345:  GOTO   348
0346:  BCF    03.6
0347:  GOTO   30C
.................... lcd_output_rs(address);	// RS = address - Databus = Bus lenh/du lieu. 
0348:  MOVF   23,F
0349:  BTFSS  03.2
034A:  GOTO   351
034B:  BCF    03.5
034C:  BCF    03.6
034D:  BCF    08.1
034E:  GOTO   354
034F:  BSF    03.5
0350:  BSF    03.6
0351:  BCF    03.5
0352:  BCF    03.6
0353:  BSF    08.1
0354:  BSF    03.5
0355:  BCF    08.1
.................... delay_cycles(1);		// Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0356:  NOP
.................... lcd_output_rw(0);		// RW = 0 - Ghi thong tin vao C.LCD. 
0357:  BCF    03.5
0358:  BCF    08.2
0359:  BSF    03.5
035A:  BCF    08.2
.................... delay_cycles(1);		// Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
035B:  NOP
.................... lcd_output_enable(0);	// EN = 0 - Cam truy xuat C.LCD. 
035C:  BCF    03.5
035D:  BCF    08.3
035E:  BSF    03.5
035F:  BCF    08.3
.................... lcd_send_nibble(n >> 4);	// Goi ham truyen 4 bit cao sang C.LCD. 
0360:  BSF    03.6
0361:  SWAPF  24,W
0362:  MOVWF  25
0363:  MOVLW  0F
0364:  ANDWF  25,F
0365:  MOVF   25,W
0366:  MOVWF  26
0367:  BCF    03.5
0368:  BCF    03.6
0369:  CALL   287
.................... lcd_send_nibble(n & 0x0F);	// Goi ham truyen 4 bit thap sang C.LCD. 
036A:  BSF    03.5
036B:  BSF    03.6
036C:  MOVF   24,W
036D:  ANDLW  0F
036E:  MOVWF  25
036F:  MOVWF  26
0370:  BCF    03.5
0371:  BCF    03.6
0372:  CALL   287
.................... } 
0373:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)	// Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {								// n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));	// Xuat lan luot cac bit len bus du lieu. 
*
0287:  BSF    03.5
0288:  BSF    03.6
0289:  BTFSC  26.0
028A:  GOTO   291
028B:  BCF    03.5
028C:  BCF    03.6
028D:  BCF    08.4
028E:  GOTO   294
028F:  BSF    03.5
0290:  BSF    03.6
0291:  BCF    03.5
0292:  BCF    03.6
0293:  BSF    08.4
0294:  BSF    03.5
0295:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
0296:  BSF    03.6
0297:  BTFSC  26.1
0298:  GOTO   29F
0299:  BCF    03.5
029A:  BCF    03.6
029B:  BCF    08.5
029C:  GOTO   2A2
029D:  BSF    03.5
029E:  BSF    03.6
029F:  BCF    03.5
02A0:  BCF    03.6
02A1:  BSF    08.5
02A2:  BSF    03.5
02A3:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
02A4:  BSF    03.6
02A5:  BTFSC  26.2
02A6:  GOTO   2AD
02A7:  BCF    03.5
02A8:  BCF    03.6
02A9:  BCF    08.6
02AA:  GOTO   2B0
02AB:  BSF    03.5
02AC:  BSF    03.6
02AD:  BCF    03.5
02AE:  BCF    03.6
02AF:  BSF    08.6
02B0:  BSF    03.5
02B1:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
02B2:  BSF    03.6
02B3:  BTFSC  26.3
02B4:  GOTO   2BB
02B5:  BCF    03.5
02B6:  BCF    03.6
02B7:  BCF    08.7
02B8:  GOTO   2BE
02B9:  BSF    03.5
02BA:  BSF    03.6
02BB:  BCF    03.5
02BC:  BCF    03.6
02BD:  BSF    08.7
02BE:  BSF    03.5
02BF:  BCF    08.7
....................      
.................... delay_cycles(1);		// Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
02C0:  NOP
.................... lcd_output_enable(1);	// Tao xung ghi thong tin vao C.LCD. 
02C1:  BCF    03.5
02C2:  BSF    08.3
02C3:  BSF    03.5
02C4:  BCF    08.3
.................... delay_us(2);			// Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
02C5:  GOTO   2C6
.................... lcd_output_enable(0);	// Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
02C6:  BCF    03.5
02C7:  BCF    08.3
02C8:  BSF    03.5
02C9:  BCF    08.3
.................... } 
02CA:  BCF    03.5
02CB:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)	// Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)					// Kiem tra vi tri truy xuat thuoc hang 2. 
*
0374:  BSF    03.5
0375:  BSF    03.6
0376:  DECFSZ 20,W
0377:  GOTO   37A
.................... 	address=lcd_line_one;		// Nap dia chi RAM cua hang 2.  
0378:  CLRF   21
.................... else if(y==2)		// Neu vi tri truy xuat thuoc hang 1. 
0379:  GOTO   38E
037A:  MOVF   20,W
037B:  SUBLW  02
037C:  BTFSS  03.2
037D:  GOTO   381
.................... 	address=lcd_line_two;		// Nap dia chi RAM cua hang 1. 
037E:  MOVLW  40
037F:  MOVWF  21
.................... else if(y==3) 
0380:  GOTO   38E
0381:  MOVF   20,W
0382:  SUBLW  03
0383:  BTFSS  03.2
0384:  GOTO   388
.................... 	address=lcd_line_three;	   
0385:  MOVLW  14
0386:  MOVWF  21
.................... else if(y==4) 
0387:  GOTO   38E
0388:  MOVF   20,W
0389:  SUBLW  04
038A:  BTFSS  03.2
038B:  GOTO   38E
.................... 	address=lcd_line_four;	 
038C:  MOVLW  54
038D:  MOVWF  21
....................  
.................... address+=x-1;					// Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).		 
038E:  MOVLW  01
038F:  SUBWF  1F,W
0390:  ADDWF  21,F
.................... 								// Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
.................... 								// (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);	// Goi ham truyen thong tin (lenh) sang C.LCD. 
0391:  MOVF   21,W
0392:  IORLW  80
0393:  MOVWF  22
0394:  CLRF   23
0395:  MOVF   22,W
0396:  MOVWF  24
0397:  BCF    03.5
0398:  BCF    03.6
0399:  CALL   309
.................... }								// Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).	 
039A:  RETLW  00
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)	// Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);				// Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));	// Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);			// RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();	// Doc ve tu C.LCD. 
.................... lcd_output_rs(0);			// RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);		// Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)	// Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
.................... 	{ 
039B:  BSF    03.5
039C:  BSF    03.6
039D:  MOVF   1E,W
039E:  XORLW  0C
039F:  BCF    03.5
03A0:  BCF    03.6
03A1:  BTFSC  03.2
03A2:  GOTO   3AA
03A3:  XORLW  06
03A4:  BTFSC  03.2
03A5:  GOTO   3BA
03A6:  XORLW  02
03A7:  BTFSC  03.2
03A8:  GOTO   3C4
03A9:  GOTO   3CD
.................... 	case '\f':  	// Chuc nang xoa hien thi. 
.................... 		lcd_send_byte(0,0x01);	// Goi ham truyen thong tin (lenh) sang C.LCD. 
03AA:  BSF    03.5
03AB:  BSF    03.6
03AC:  CLRF   23
03AD:  MOVLW  01
03AE:  MOVWF  24
03AF:  BCF    03.5
03B0:  BCF    03.6
03B1:  CALL   309
.................... 		delay_ms(2);			// Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
03B2:  MOVLW  02
03B3:  BSF    03.5
03B4:  BSF    03.6
03B5:  MOVWF  1F
03B6:  BCF    03.5
03B7:  BCF    03.6
03B8:  CALL   272
.................... 		break; 
03B9:  GOTO   3D7
.................... 	case '\n': 		// Chuc nang bat dau hang thu 2. 
.................... 		lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
03BA:  MOVLW  01
03BB:  BSF    03.5
03BC:  BSF    03.6
03BD:  MOVWF  1F
03BE:  MOVLW  02
03BF:  MOVWF  20
03C0:  BCF    03.5
03C1:  BCF    03.6
03C2:  CALL   374
.................... 		break; 
03C3:  GOTO   3D7
....................     case '\b': 		// Chuc nang lui ve 1 vi tri. 
.................... 		lcd_send_byte(0,0x10); 	// Goi ham truyen thong tin (lenh) sang C.LCD.  
03C4:  BSF    03.5
03C5:  BSF    03.6
03C6:  CLRF   23
03C7:  MOVLW  10
03C8:  MOVWF  24
03C9:  BCF    03.5
03CA:  BCF    03.6
03CB:  CALL   309
.................... 		break;					// Lenh: Doi con tro sang trai (0x10). 
03CC:  GOTO   3D7
.................... 	default: 		// Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... 		lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
03CD:  MOVLW  01
03CE:  BSF    03.5
03CF:  BSF    03.6
03D0:  MOVWF  23
03D1:  MOVF   1E,W
03D2:  MOVWF  24
03D3:  BCF    03.5
03D4:  BCF    03.6
03D5:  CALL   309
.................... 		break; 
03D6:  GOTO   3D7
....................    } 
.................... }		 
03D7:  RETLW  00
.................... // ***************************************************	 
....................  
.................... /***************************************************************/ 
.................... /***************************************************************/ 
.................... char sms[90]; 
.................... char c=0x00,c1=0x00,c2=0x00,c3=0x00,c4=0x00; 
*
087E:  BCF    03.6
087F:  CLRF   28
0880:  CLRF   29
0881:  CLRF   2A
0882:  CLRF   2B
0883:  CLRF   2C
.................... unsigned int8 new_sms=0,i=0,j=0,k=0; 
0884:  CLRF   2D
0885:  CLRF   2E
0886:  CLRF   2F
0887:  CLRF   30
.................... unsigned int8 index=0,interrupt=0; 
0888:  CLRF   31
0889:  CLRF   32
.................... unsigned int8 status=1; 
088A:  MOVLW  01
088B:  MOVWF  33
.................... char st[4]; 
....................  
.................... /***************************************************************/ 
.................... void _Delete_SMS(); 
.................... void _Reset_SMS(); 
.................... void _Send_SMS(unsigned char style); 
.................... void _Dial(char number); 
.................... void _Delay(int n); 
.................... void _Waiting_SIM(void); 
.................... void _Startup(); 
.................... void _Configuration_Sim(); 
.................... void _Display(); 
.................... void _Blank(); 
.................... void _Reset_Buffer(int time); 
.................... void _Response(char style); 
.................... void _Status_1(); 
.................... void _Status_2(); 
.................... void _Status_3(); 
.................... void _Status_4(); 
.................... void _Turn_On(char name); 
.................... void _Turn_Off(char name); 
.................... void _Turn_On_All(); 
.................... void _Turn_Off_All(); 
....................  
.................... /***************************************************************/ 
.................... #int_RDA 
.................... void  RDA_isr(void) 
.................... { 
....................   	c=getc(); 
*
01E6:  BTFSS  0C.5
01E7:  GOTO   1E6
01E8:  MOVF   1A,W
01E9:  MOVWF  28
....................     if(c=='+') c1=c; 
01EA:  MOVF   28,W
01EB:  SUBLW  2B
01EC:  BTFSS  03.2
01ED:  GOTO   1F0
01EE:  MOVF   28,W
01EF:  MOVWF  29
....................   	if(c=='C') c2=c; 
01F0:  MOVF   28,W
01F1:  SUBLW  43
01F2:  BTFSS  03.2
01F3:  GOTO   1F6
01F4:  MOVF   28,W
01F5:  MOVWF  2A
....................   	if(c=='M') c3=c; 
01F6:  MOVF   28,W
01F7:  SUBLW  4D
01F8:  BTFSS  03.2
01F9:  GOTO   1FC
01FA:  MOVF   28,W
01FB:  MOVWF  2B
....................   	if(c=='T') c4=c; 
01FC:  MOVF   28,W
01FD:  SUBLW  54
01FE:  BTFSS  03.2
01FF:  GOTO   202
0200:  MOVF   28,W
0201:  MOVWF  2C
....................   	if(c1=='+' && c2=='C' && c3=='M' && c4=='T') new_sms=1; 
0202:  MOVF   29,W
0203:  SUBLW  2B
0204:  BTFSS  03.2
0205:  GOTO   214
0206:  MOVF   2A,W
0207:  SUBLW  43
0208:  BTFSS  03.2
0209:  GOTO   214
020A:  MOVF   2B,W
020B:  SUBLW  4D
020C:  BTFSS  03.2
020D:  GOTO   214
020E:  MOVF   2C,W
020F:  SUBLW  54
0210:  BTFSS  03.2
0211:  GOTO   214
0212:  MOVLW  01
0213:  MOVWF  2D
....................  
.................... 	if(c!='\0') 
0214:  MOVF   28,F
0215:  BTFSC  03.2
0216:  GOTO   21E
.................... 	{sms[index++]=c;} 
0217:  MOVF   31,W
0218:  INCF   31,F
0219:  ADDLW  10
021A:  MOVWF  04
021B:  BSF    03.7
021C:  MOVF   28,W
021D:  MOVWF  00
....................  
.................... 	if(index>=89) 
021E:  MOVF   31,W
021F:  SUBLW  58
0220:  BTFSC  03.0
0221:  GOTO   223
.................... 	{ 
.................... 		index=0; 
0222:  CLRF   31
.................... 	} 
....................  
.................... 	if(index>5 && new_sms==0) 
0223:  MOVF   31,W
0224:  SUBLW  05
0225:  BTFSC  03.0
0226:  GOTO   22C
0227:  MOVF   2D,F
0228:  BTFSS  03.2
0229:  GOTO   22C
.................... 	{ 
.................... 		interrupt=1; 
022A:  MOVLW  01
022B:  MOVWF  32
.................... 	} 
.................... } 
.................... /***************************************************************/ 
.................... /***************************************************************/ 
022C:  BCF    0C.5
022D:  BCF    0A.3
022E:  BCF    0A.4
022F:  GOTO   01F
.................... void main() 
.................... { 
*
0860:  CLRF   04
0861:  BCF    03.7
0862:  MOVLW  1F
0863:  ANDWF  03,F
0864:  BSF    03.5
0865:  BSF    03.6
0866:  BCF    07.3
0867:  MOVLW  19
0868:  BCF    03.6
0869:  MOVWF  19
086A:  MOVLW  A6
086B:  MOVWF  18
086C:  MOVLW  90
086D:  BCF    03.5
086E:  MOVWF  18
086F:  BSF    03.5
0870:  BSF    03.6
0871:  MOVF   09,W
0872:  ANDLW  C0
0873:  MOVWF  09
0874:  BCF    03.6
0875:  BCF    1F.4
0876:  BCF    1F.5
0877:  MOVLW  00
0878:  BSF    03.6
0879:  MOVWF  08
087A:  BCF    03.5
087B:  CLRF   07
087C:  CLRF   08
087D:  CLRF   09
.................... 	_Startup();		 
*
088E:  BCF    0A.3
088F:  GOTO   3FA
0890:  BSF    0A.3
....................   	_Waiting_SIM(); 
0891:  BCF    0A.3
0892:  GOTO   45A
0893:  BSF    0A.3
.................... 	_Configuration_Sim();_Delay(30); 
0894:  BCF    0A.3
0895:  GOTO   581
0896:  BSF    0A.3
0897:  MOVLW  1E
0898:  BSF    03.5
0899:  BSF    03.6
089A:  MOVWF  14
089B:  BCF    0A.3
089C:  BCF    03.5
089D:  BCF    03.6
089E:  CALL   3D8
089F:  BSF    0A.3
....................   	_Send_SMS(1);_Delay(5);_Display(); 
08A0:  MOVLW  01
08A1:  BSF    03.5
08A2:  BSF    03.6
08A3:  MOVWF  10
08A4:  BCF    0A.3
08A5:  BCF    03.5
08A6:  BCF    03.6
08A7:  GOTO   5BF
08A8:  BSF    0A.3
08A9:  MOVLW  05
08AA:  BSF    03.5
08AB:  BSF    03.6
08AC:  MOVWF  14
08AD:  BCF    0A.3
08AE:  BCF    03.5
08AF:  BCF    03.6
08B0:  CALL   3D8
08B1:  BSF    0A.3
08B2:  BCF    0A.3
08B3:  CALL   4FF
08B4:  BSF    0A.3
.................... 	_Turn_Off_All(); 
08B5:  BCF    0A.3
08B6:  CALL   230
08B7:  BSF    0A.3
.................... 	_Blank(); 
08B8:  BCF    0A.3
08B9:  CALL   3EB
08BA:  BSF    0A.3
.................... 	_Status_1(); 
08BB:  BCF    0A.3
08BC:  GOTO   63D
08BD:  BSF    0A.3
.................... 	_Status_2(); 
08BE:  BCF    0A.3
08BF:  GOTO   64C
08C0:  BSF    0A.3
.................... 	_Status_3(); 
08C1:  BCF    0A.3
08C2:  GOTO   65B
08C3:  BSF    0A.3
.................... 	_Status_4(); 
08C4:  BCF    0A.3
08C5:  GOTO   66A
08C6:  BSF    0A.3
.................... 		 
.................... 	while(1) 
.................... 	{			 
.................... 		lcd_gotoxy(1,1); 
08C7:  MOVLW  01
08C8:  BSF    03.5
08C9:  BSF    03.6
08CA:  MOVWF  1F
08CB:  MOVWF  20
08CC:  BCF    0A.3
08CD:  BCF    03.5
08CE:  BCF    03.6
08CF:  CALL   374
08D0:  BSF    0A.3
.................... 		printf(lcd_putc,"TRANG THAI TB            "); 
08D1:  BSF    03.5
08D2:  BSF    03.6
08D3:  CLRF   10
08D4:  MOVF   10,W
08D5:  BCF    0A.3
08D6:  BCF    03.5
08D7:  BCF    03.6
08D8:  CALL   03D
08D9:  BSF    0A.3
08DA:  BSF    03.5
08DB:  BSF    03.6
08DC:  INCF   10,F
08DD:  MOVWF  77
08DE:  MOVWF  1E
08DF:  BCF    0A.3
08E0:  BCF    03.5
08E1:  BCF    03.6
08E2:  CALL   39B
08E3:  BSF    0A.3
08E4:  MOVLW  19
08E5:  BSF    03.5
08E6:  BSF    03.6
08E7:  SUBWF  10,W
08E8:  BTFSS  03.2
08E9:  GOTO   0D4
.................... 		lcd_gotoxy(1,2); 
08EA:  MOVLW  01
08EB:  MOVWF  1F
08EC:  MOVLW  02
08ED:  MOVWF  20
08EE:  BCF    0A.3
08EF:  BCF    03.5
08F0:  BCF    03.6
08F1:  CALL   374
08F2:  BSF    0A.3
.................... 		printf(lcd_putc,"1%c2%c3%c4%c             ",st[0],st[1],st[2],st[3]); 
08F3:  MOVLW  31
08F4:  BSF    03.5
08F5:  BSF    03.6
08F6:  MOVWF  1E
08F7:  BCF    0A.3
08F8:  BCF    03.5
08F9:  BCF    03.6
08FA:  CALL   39B
08FB:  BSF    0A.3
08FC:  MOVF   34,W
08FD:  BSF    03.5
08FE:  BSF    03.6
08FF:  MOVWF  1E
0900:  BCF    0A.3
0901:  BCF    03.5
0902:  BCF    03.6
0903:  CALL   39B
0904:  BSF    0A.3
0905:  MOVLW  32
0906:  BSF    03.5
0907:  BSF    03.6
0908:  MOVWF  1E
0909:  BCF    0A.3
090A:  BCF    03.5
090B:  BCF    03.6
090C:  CALL   39B
090D:  BSF    0A.3
090E:  MOVF   35,W
090F:  BSF    03.5
0910:  BSF    03.6
0911:  MOVWF  1E
0912:  BCF    0A.3
0913:  BCF    03.5
0914:  BCF    03.6
0915:  CALL   39B
0916:  BSF    0A.3
0917:  MOVLW  33
0918:  BSF    03.5
0919:  BSF    03.6
091A:  MOVWF  1E
091B:  BCF    0A.3
091C:  BCF    03.5
091D:  BCF    03.6
091E:  CALL   39B
091F:  BSF    0A.3
0920:  MOVF   36,W
0921:  BSF    03.5
0922:  BSF    03.6
0923:  MOVWF  1E
0924:  BCF    0A.3
0925:  BCF    03.5
0926:  BCF    03.6
0927:  CALL   39B
0928:  BSF    0A.3
0929:  MOVLW  34
092A:  BSF    03.5
092B:  BSF    03.6
092C:  MOVWF  1E
092D:  BCF    0A.3
092E:  BCF    03.5
092F:  BCF    03.6
0930:  CALL   39B
0931:  BSF    0A.3
0932:  MOVF   37,W
0933:  BSF    03.5
0934:  BSF    03.6
0935:  MOVWF  1E
0936:  BCF    0A.3
0937:  BCF    03.5
0938:  BCF    03.6
0939:  CALL   39B
093A:  BSF    0A.3
093B:  MOVLW  0C
093C:  BSF    03.5
093D:  BSF    03.6
093E:  MOVWF  10
093F:  MOVF   10,W
0940:  BCF    0A.3
0941:  BCF    03.5
0942:  BCF    03.6
0943:  CALL   05B
0944:  BSF    0A.3
0945:  BSF    03.5
0946:  BSF    03.6
0947:  INCF   10,F
0948:  MOVWF  77
0949:  MOVWF  1E
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  BCF    03.6
094D:  CALL   39B
094E:  BSF    0A.3
094F:  MOVLW  19
0950:  BSF    03.5
0951:  BSF    03.6
0952:  SUBWF  10,W
0953:  BTFSS  03.2
0954:  GOTO   13F
.................... 		 
.................... 		if(interrupt==1) 
0955:  BCF    03.5
0956:  BCF    03.6
0957:  DECFSZ 32,W
0958:  GOTO   18B
.................... 		{			 
.................... 			lcd_gotoxy(1,2); 
0959:  MOVLW  01
095A:  BSF    03.5
095B:  BSF    03.6
095C:  MOVWF  1F
095D:  MOVLW  02
095E:  MOVWF  20
095F:  BCF    0A.3
0960:  BCF    03.5
0961:  BCF    03.6
0962:  CALL   374
0963:  BSF    0A.3
.................... 			printf(lcd_putc,"Interrupting        ");	 
0964:  BSF    03.5
0965:  BSF    03.6
0966:  CLRF   10
0967:  MOVF   10,W
0968:  BCF    0A.3
0969:  BCF    03.5
096A:  BCF    03.6
096B:  CALL   079
096C:  BSF    0A.3
096D:  BSF    03.5
096E:  BSF    03.6
096F:  INCF   10,F
0970:  MOVWF  77
0971:  MOVWF  1E
0972:  BCF    0A.3
0973:  BCF    03.5
0974:  BCF    03.6
0975:  CALL   39B
0976:  BSF    0A.3
0977:  MOVLW  14
0978:  BSF    03.5
0979:  BSF    03.6
097A:  SUBWF  10,W
097B:  BTFSS  03.2
097C:  GOTO   167
.................... 			_Delay(10); _Display();_Blank(); 
097D:  MOVLW  0A
097E:  MOVWF  14
097F:  BCF    0A.3
0980:  BCF    03.5
0981:  BCF    03.6
0982:  CALL   3D8
0983:  BSF    0A.3
0984:  BCF    0A.3
0985:  CALL   4FF
0986:  BSF    0A.3
0987:  BCF    0A.3
0988:  CALL   3EB
0989:  BSF    0A.3
.................... 		} 
.................... 		else if(new_sms==1) 
098A:  GOTO   6AC
098B:  DECFSZ 2D,W
098C:  GOTO   6AC
.................... 		{ 
.................... 			lcd_gotoxy(1,2); 
098D:  MOVLW  01
098E:  BSF    03.5
098F:  BSF    03.6
0990:  MOVWF  1F
0991:  MOVLW  02
0992:  MOVWF  20
0993:  BCF    0A.3
0994:  BCF    03.5
0995:  BCF    03.6
0996:  CALL   374
0997:  BSF    0A.3
.................... 			printf(lcd_putc,"New inbox              "); 
0998:  BSF    03.5
0999:  BSF    03.6
099A:  CLRF   10
099B:  MOVF   10,W
099C:  BCF    0A.3
099D:  BCF    03.5
099E:  BCF    03.6
099F:  CALL   092
09A0:  BSF    0A.3
09A1:  BSF    03.5
09A2:  BSF    03.6
09A3:  INCF   10,F
09A4:  MOVWF  77
09A5:  MOVWF  1E
09A6:  BCF    0A.3
09A7:  BCF    03.5
09A8:  BCF    03.6
09A9:  CALL   39B
09AA:  BSF    0A.3
09AB:  MOVLW  17
09AC:  BSF    03.5
09AD:  BSF    03.6
09AE:  SUBWF  10,W
09AF:  BTFSS  03.2
09B0:  GOTO   19B
.................... 			_Delay(10); 
09B1:  MOVLW  0A
09B2:  MOVWF  14
09B3:  BCF    0A.3
09B4:  BCF    03.5
09B5:  BCF    03.6
09B6:  CALL   3D8
09B7:  BSF    0A.3
.................... 			for(j=50;j<80;j++) 
09B8:  MOVLW  32
09B9:  MOVWF  2F
09BA:  MOVF   2F,W
09BB:  SUBLW  4F
09BC:  BTFSS  03.0
09BD:  GOTO   69D
.................... 			{	 
.................... 			   if((sms[j]=='x'||sms[j]=='X')&&(sms[j+1]=='o'||sms[j+1]=='O')&&(sms[j+2]=='a'||sms[j+2]=='A')) 
09BE:  MOVLW  10
09BF:  ADDWF  2F,W
09C0:  MOVWF  04
09C1:  BSF    03.7
09C2:  MOVF   00,W
09C3:  SUBLW  78
09C4:  BTFSC  03.2
09C5:  GOTO   1CE
09C6:  MOVLW  10
09C7:  ADDWF  2F,W
09C8:  MOVWF  04
09C9:  BSF    03.7
09CA:  MOVF   00,W
09CB:  SUBLW  58
09CC:  BTFSS  03.2
09CD:  GOTO   276
09CE:  MOVLW  01
09CF:  ADDWF  2F,W
09D0:  ADDLW  10
09D1:  MOVWF  04
09D2:  BSF    03.7
09D3:  MOVF   00,W
09D4:  SUBLW  6F
09D5:  BTFSC  03.2
09D6:  GOTO   1E0
09D7:  MOVLW  01
09D8:  ADDWF  2F,W
09D9:  ADDLW  10
09DA:  MOVWF  04
09DB:  BSF    03.7
09DC:  MOVF   00,W
09DD:  SUBLW  4F
09DE:  BTFSS  03.2
09DF:  GOTO   276
09E0:  MOVLW  02
09E1:  ADDWF  2F,W
09E2:  ADDLW  10
09E3:  MOVWF  04
09E4:  BSF    03.7
09E5:  MOVF   00,W
09E6:  SUBLW  61
09E7:  BTFSC  03.2
09E8:  GOTO   1F2
09E9:  MOVLW  02
09EA:  ADDWF  2F,W
09EB:  ADDLW  10
09EC:  MOVWF  04
09ED:  BSF    03.7
09EE:  MOVF   00,W
09EF:  SUBLW  41
09F0:  BTFSS  03.2
09F1:  GOTO   276
.................... 				{ 
.................... 					_Blank(); 
09F2:  BCF    0A.3
09F3:  CALL   3EB
09F4:  BSF    0A.3
.................... 					lcd_gotoxy(1,1);					 
09F5:  MOVLW  01
09F6:  BSF    03.5
09F7:  BSF    03.6
09F8:  MOVWF  1F
09F9:  MOVWF  20
09FA:  BCF    0A.3
09FB:  BCF    03.5
09FC:  BCF    03.6
09FD:  CALL   374
09FE:  BSF    0A.3
.................... 					printf(lcd_putc,"%c%c%c             ",sms[j],sms[j+1],sms[j+2]);	 
09FF:  MOVLW  10
0A00:  ADDWF  2F,W
0A01:  MOVWF  04
0A02:  BSF    03.7
0A03:  MOVF   00,W
0A04:  BSF    03.5
0A05:  BSF    03.6
0A06:  MOVWF  10
0A07:  MOVLW  01
0A08:  BCF    03.5
0A09:  BCF    03.6
0A0A:  ADDWF  2F,W
0A0B:  ADDLW  10
0A0C:  MOVWF  04
0A0D:  BSF    03.7
0A0E:  MOVF   00,W
0A0F:  BSF    03.5
0A10:  BSF    03.6
0A11:  MOVWF  12
0A12:  MOVLW  02
0A13:  BCF    03.5
0A14:  BCF    03.6
0A15:  ADDWF  2F,W
0A16:  ADDLW  10
0A17:  MOVWF  04
0A18:  BSF    03.7
0A19:  MOVF   00,W
0A1A:  BSF    03.5
0A1B:  BSF    03.6
0A1C:  MOVWF  14
0A1D:  MOVF   10,W
0A1E:  MOVWF  1E
0A1F:  BCF    0A.3
0A20:  BCF    03.5
0A21:  BCF    03.6
0A22:  CALL   39B
0A23:  BSF    0A.3
0A24:  BSF    03.5
0A25:  BSF    03.6
0A26:  MOVF   12,W
0A27:  MOVWF  1E
0A28:  BCF    0A.3
0A29:  BCF    03.5
0A2A:  BCF    03.6
0A2B:  CALL   39B
0A2C:  BSF    0A.3
0A2D:  BSF    03.5
0A2E:  BSF    03.6
0A2F:  MOVF   14,W
0A30:  MOVWF  1E
0A31:  BCF    0A.3
0A32:  BCF    03.5
0A33:  BCF    03.6
0A34:  CALL   39B
0A35:  BSF    0A.3
0A36:  MOVLW  06
0A37:  BSF    03.5
0A38:  BSF    03.6
0A39:  MOVWF  15
0A3A:  MOVF   15,W
0A3B:  BCF    0A.3
0A3C:  BCF    03.5
0A3D:  BCF    03.6
0A3E:  CALL   0AE
0A3F:  BSF    0A.3
0A40:  BSF    03.5
0A41:  BSF    03.6
0A42:  INCF   15,F
0A43:  MOVWF  77
0A44:  MOVWF  1E
0A45:  BCF    0A.3
0A46:  BCF    03.5
0A47:  BCF    03.6
0A48:  CALL   39B
0A49:  BSF    0A.3
0A4A:  MOVLW  13
0A4B:  BSF    03.5
0A4C:  BSF    03.6
0A4D:  SUBWF  15,W
0A4E:  BTFSS  03.2
0A4F:  GOTO   23A
.................... 					_Delay(10); 
0A50:  MOVLW  0A
0A51:  MOVWF  14
0A52:  BCF    0A.3
0A53:  BCF    03.5
0A54:  BCF    03.6
0A55:  CALL   3D8
0A56:  BSF    0A.3
.................... 					_Delete_SMS();_Delay(5);_Display();_Blank(); 
0A57:  BCF    0A.3
0A58:  GOTO   679
0A59:  BSF    0A.3
0A5A:  MOVLW  05
0A5B:  BSF    03.5
0A5C:  BSF    03.6
0A5D:  MOVWF  14
0A5E:  BCF    0A.3
0A5F:  BCF    03.5
0A60:  BCF    03.6
0A61:  CALL   3D8
0A62:  BSF    0A.3
0A63:  BCF    0A.3
0A64:  CALL   4FF
0A65:  BSF    0A.3
0A66:  BCF    0A.3
0A67:  CALL   3EB
0A68:  BSF    0A.3
.................... 					_Reset_SMS(); 
0A69:  BCF    0A.3
0A6A:  CALL   4DE
0A6B:  BSF    0A.3
.................... 					_Response(2); 
0A6C:  MOVLW  02
0A6D:  BSF    03.5
0A6E:  BSF    03.6
0A6F:  MOVWF  10
0A70:  BCF    0A.3
0A71:  BCF    03.5
0A72:  BCF    03.6
0A73:  CALL   693
0A74:  BSF    0A.3
.................... 				} 
.................... 			   else if((sms[j]=='b'||sms[j]=='B')&&(sms[j+1]=='a'||sms[j+1]=='A')&&(sms[j+2]=='t'||sms[j+2]=='T')&&(sms[j+3]=='h'||sms[j+3]=='H')&&(sms[j+4]=='e'||sms[j+4]=='E')&&(sms[j+5]=='t'||sms[j+5]=='T')) 
0A75:  GOTO   69B
0A76:  MOVLW  10
0A77:  ADDWF  2F,W
0A78:  MOVWF  04
0A79:  BSF    03.7
0A7A:  MOVF   00,W
0A7B:  SUBLW  62
0A7C:  BTFSC  03.2
0A7D:  GOTO   286
0A7E:  MOVLW  10
0A7F:  ADDWF  2F,W
0A80:  MOVWF  04
0A81:  BSF    03.7
0A82:  MOVF   00,W
0A83:  SUBLW  42
0A84:  BTFSS  03.2
0A85:  GOTO   3A6
0A86:  MOVLW  01
0A87:  ADDWF  2F,W
0A88:  ADDLW  10
0A89:  MOVWF  04
0A8A:  BSF    03.7
0A8B:  MOVF   00,W
0A8C:  SUBLW  61
0A8D:  BTFSC  03.2
0A8E:  GOTO   298
0A8F:  MOVLW  01
0A90:  ADDWF  2F,W
0A91:  ADDLW  10
0A92:  MOVWF  04
0A93:  BSF    03.7
0A94:  MOVF   00,W
0A95:  SUBLW  41
0A96:  BTFSS  03.2
0A97:  GOTO   3A6
0A98:  MOVLW  02
0A99:  ADDWF  2F,W
0A9A:  ADDLW  10
0A9B:  MOVWF  04
0A9C:  BSF    03.7
0A9D:  MOVF   00,W
0A9E:  SUBLW  74
0A9F:  BTFSC  03.2
0AA0:  GOTO   2AA
0AA1:  MOVLW  02
0AA2:  ADDWF  2F,W
0AA3:  ADDLW  10
0AA4:  MOVWF  04
0AA5:  BSF    03.7
0AA6:  MOVF   00,W
0AA7:  SUBLW  54
0AA8:  BTFSS  03.2
0AA9:  GOTO   3A6
0AAA:  MOVLW  03
0AAB:  ADDWF  2F,W
0AAC:  ADDLW  10
0AAD:  MOVWF  04
0AAE:  BSF    03.7
0AAF:  MOVF   00,W
0AB0:  SUBLW  68
0AB1:  BTFSC  03.2
0AB2:  GOTO   2BC
0AB3:  MOVLW  03
0AB4:  ADDWF  2F,W
0AB5:  ADDLW  10
0AB6:  MOVWF  04
0AB7:  BSF    03.7
0AB8:  MOVF   00,W
0AB9:  SUBLW  48
0ABA:  BTFSS  03.2
0ABB:  GOTO   3A6
0ABC:  MOVLW  04
0ABD:  ADDWF  2F,W
0ABE:  ADDLW  10
0ABF:  MOVWF  04
0AC0:  BSF    03.7
0AC1:  MOVF   00,W
0AC2:  SUBLW  65
0AC3:  BTFSC  03.2
0AC4:  GOTO   2CE
0AC5:  MOVLW  04
0AC6:  ADDWF  2F,W
0AC7:  ADDLW  10
0AC8:  MOVWF  04
0AC9:  BSF    03.7
0ACA:  MOVF   00,W
0ACB:  SUBLW  45
0ACC:  BTFSS  03.2
0ACD:  GOTO   3A6
0ACE:  MOVLW  05
0ACF:  ADDWF  2F,W
0AD0:  ADDLW  10
0AD1:  MOVWF  04
0AD2:  BSF    03.7
0AD3:  MOVF   00,W
0AD4:  SUBLW  74
0AD5:  BTFSC  03.2
0AD6:  GOTO   2E0
0AD7:  MOVLW  05
0AD8:  ADDWF  2F,W
0AD9:  ADDLW  10
0ADA:  MOVWF  04
0ADB:  BSF    03.7
0ADC:  MOVF   00,W
0ADD:  SUBLW  54
0ADE:  BTFSS  03.2
0ADF:  GOTO   3A6
.................... 				{ 
.................... 					_Blank(); 
0AE0:  BCF    0A.3
0AE1:  CALL   3EB
0AE2:  BSF    0A.3
.................... 					lcd_gotoxy(1,1);					 
0AE3:  MOVLW  01
0AE4:  BSF    03.5
0AE5:  BSF    03.6
0AE6:  MOVWF  1F
0AE7:  MOVWF  20
0AE8:  BCF    0A.3
0AE9:  BCF    03.5
0AEA:  BCF    03.6
0AEB:  CALL   374
0AEC:  BSF    0A.3
.................... 					printf(lcd_putc,"%c%c%c%c%c%c%c            ",sms[j],sms[j+1],sms[j+2],sms[j+3],sms[j+4],sms[j+5],sms[j+6]);	//sms[j+3]:Ten thiet bi can bat 
0AED:  MOVLW  10
0AEE:  ADDWF  2F,W
0AEF:  MOVWF  04
0AF0:  BSF    03.7
0AF1:  MOVF   00,W
0AF2:  BSF    03.5
0AF3:  BSF    03.6
0AF4:  MOVWF  10
0AF5:  MOVLW  01
0AF6:  BCF    03.5
0AF7:  BCF    03.6
0AF8:  ADDWF  2F,W
0AF9:  ADDLW  10
0AFA:  MOVWF  04
0AFB:  BSF    03.7
0AFC:  MOVF   00,W
0AFD:  BSF    03.5
0AFE:  BSF    03.6
0AFF:  MOVWF  12
0B00:  MOVLW  02
0B01:  BCF    03.5
0B02:  BCF    03.6
0B03:  ADDWF  2F,W
0B04:  ADDLW  10
0B05:  MOVWF  04
0B06:  BSF    03.7
0B07:  MOVF   00,W
0B08:  BSF    03.5
0B09:  BSF    03.6
0B0A:  MOVWF  14
0B0B:  MOVLW  03
0B0C:  BCF    03.5
0B0D:  BCF    03.6
0B0E:  ADDWF  2F,W
0B0F:  ADDLW  10
0B10:  MOVWF  04
0B11:  BSF    03.7
0B12:  MOVF   00,W
0B13:  BSF    03.5
0B14:  BSF    03.6
0B15:  MOVWF  16
0B16:  MOVLW  04
0B17:  BCF    03.5
0B18:  BCF    03.6
0B19:  ADDWF  2F,W
0B1A:  ADDLW  10
0B1B:  MOVWF  04
0B1C:  BSF    03.7
0B1D:  MOVF   00,W
0B1E:  BSF    03.5
0B1F:  BSF    03.6
0B20:  MOVWF  18
0B21:  MOVLW  05
0B22:  BCF    03.5
0B23:  BCF    03.6
0B24:  ADDWF  2F,W
0B25:  ADDLW  10
0B26:  MOVWF  04
0B27:  BSF    03.7
0B28:  MOVF   00,W
0B29:  BSF    03.5
0B2A:  BSF    03.6
0B2B:  MOVWF  1A
0B2C:  MOVLW  06
0B2D:  BCF    03.5
0B2E:  BCF    03.6
0B2F:  ADDWF  2F,W
0B30:  ADDLW  10
0B31:  MOVWF  04
0B32:  BSF    03.7
0B33:  MOVF   00,W
0B34:  BSF    03.5
0B35:  BSF    03.6
0B36:  MOVWF  1C
0B37:  MOVF   10,W
0B38:  MOVWF  1E
0B39:  BCF    0A.3
0B3A:  BCF    03.5
0B3B:  BCF    03.6
0B3C:  CALL   39B
0B3D:  BSF    0A.3
0B3E:  BSF    03.5
0B3F:  BSF    03.6
0B40:  MOVF   12,W
0B41:  MOVWF  1E
0B42:  BCF    0A.3
0B43:  BCF    03.5
0B44:  BCF    03.6
0B45:  CALL   39B
0B46:  BSF    0A.3
0B47:  BSF    03.5
0B48:  BSF    03.6
0B49:  MOVF   14,W
0B4A:  MOVWF  1E
0B4B:  BCF    0A.3
0B4C:  BCF    03.5
0B4D:  BCF    03.6
0B4E:  CALL   39B
0B4F:  BSF    0A.3
0B50:  BSF    03.5
0B51:  BSF    03.6
0B52:  MOVF   16,W
0B53:  MOVWF  1E
0B54:  BCF    0A.3
0B55:  BCF    03.5
0B56:  BCF    03.6
0B57:  CALL   39B
0B58:  BSF    0A.3
0B59:  BSF    03.5
0B5A:  BSF    03.6
0B5B:  MOVF   18,W
0B5C:  MOVWF  1E
0B5D:  BCF    0A.3
0B5E:  BCF    03.5
0B5F:  BCF    03.6
0B60:  CALL   39B
0B61:  BSF    0A.3
0B62:  BSF    03.5
0B63:  BSF    03.6
0B64:  MOVF   1A,W
0B65:  MOVWF  1E
0B66:  BCF    0A.3
0B67:  BCF    03.5
0B68:  BCF    03.6
0B69:  CALL   39B
0B6A:  BSF    0A.3
0B6B:  BSF    03.5
0B6C:  BSF    03.6
0B6D:  MOVF   1C,W
0B6E:  MOVWF  1E
0B6F:  BCF    0A.3
0B70:  BCF    03.5
0B71:  BCF    03.6
0B72:  CALL   39B
0B73:  BSF    0A.3
0B74:  MOVLW  0E
0B75:  BSF    03.5
0B76:  BSF    03.6
0B77:  MOVWF  1D
0B78:  MOVF   1D,W
0B79:  BCF    0A.3
0B7A:  BCF    03.5
0B7B:  BCF    03.6
0B7C:  CALL   0C6
0B7D:  BSF    0A.3
0B7E:  BSF    03.5
0B7F:  BSF    03.6
0B80:  INCF   1D,F
0B81:  MOVWF  77
0B82:  MOVWF  1E
0B83:  BCF    0A.3
0B84:  BCF    03.5
0B85:  BCF    03.6
0B86:  CALL   39B
0B87:  BSF    0A.3
0B88:  MOVLW  1A
0B89:  BSF    03.5
0B8A:  BSF    03.6
0B8B:  SUBWF  1D,W
0B8C:  BTFSS  03.2
0B8D:  GOTO   378
.................... 					_Delay(10); 
0B8E:  MOVLW  0A
0B8F:  MOVWF  14
0B90:  BCF    0A.3
0B91:  BCF    03.5
0B92:  BCF    03.6
0B93:  CALL   3D8
0B94:  BSF    0A.3
.................... 					_Turn_On_All(); 
0B95:  BCF    0A.3
0B96:  GOTO   72D
0B97:  BSF    0A.3
.................... 					_Reset_SMS(); 
0B98:  BCF    0A.3
0B99:  CALL   4DE
0B9A:  BSF    0A.3
.................... 					_Response(1); 
0B9B:  MOVLW  01
0B9C:  BSF    03.5
0B9D:  BSF    03.6
0B9E:  MOVWF  10
0B9F:  BCF    0A.3
0BA0:  BCF    03.5
0BA1:  BCF    03.6
0BA2:  CALL   693
0BA3:  BSF    0A.3
.................... 					break; 
0BA4:  GOTO   69D
.................... 				}	 
.................... 				else if((sms[j]=='t'||sms[j]=='T')&&(sms[j+1]=='a'||sms[j+1]=='A')&&(sms[j+2]=='t'||sms[j+2]=='T')&&(sms[j+3]=='h'||sms[j+3]=='H')&&(sms[j+4]=='e'||sms[j+4]=='E')&&(sms[j+5]=='t'||sms[j+5]=='T')) 
0BA5:  GOTO   69B
0BA6:  MOVLW  10
0BA7:  ADDWF  2F,W
0BA8:  MOVWF  04
0BA9:  BSF    03.7
0BAA:  MOVF   00,W
0BAB:  SUBLW  74
0BAC:  BTFSC  03.2
0BAD:  GOTO   3B6
0BAE:  MOVLW  10
0BAF:  ADDWF  2F,W
0BB0:  MOVWF  04
0BB1:  BSF    03.7
0BB2:  MOVF   00,W
0BB3:  SUBLW  54
0BB4:  BTFSS  03.2
0BB5:  GOTO   4D6
0BB6:  MOVLW  01
0BB7:  ADDWF  2F,W
0BB8:  ADDLW  10
0BB9:  MOVWF  04
0BBA:  BSF    03.7
0BBB:  MOVF   00,W
0BBC:  SUBLW  61
0BBD:  BTFSC  03.2
0BBE:  GOTO   3C8
0BBF:  MOVLW  01
0BC0:  ADDWF  2F,W
0BC1:  ADDLW  10
0BC2:  MOVWF  04
0BC3:  BSF    03.7
0BC4:  MOVF   00,W
0BC5:  SUBLW  41
0BC6:  BTFSS  03.2
0BC7:  GOTO   4D6
0BC8:  MOVLW  02
0BC9:  ADDWF  2F,W
0BCA:  ADDLW  10
0BCB:  MOVWF  04
0BCC:  BSF    03.7
0BCD:  MOVF   00,W
0BCE:  SUBLW  74
0BCF:  BTFSC  03.2
0BD0:  GOTO   3DA
0BD1:  MOVLW  02
0BD2:  ADDWF  2F,W
0BD3:  ADDLW  10
0BD4:  MOVWF  04
0BD5:  BSF    03.7
0BD6:  MOVF   00,W
0BD7:  SUBLW  54
0BD8:  BTFSS  03.2
0BD9:  GOTO   4D6
0BDA:  MOVLW  03
0BDB:  ADDWF  2F,W
0BDC:  ADDLW  10
0BDD:  MOVWF  04
0BDE:  BSF    03.7
0BDF:  MOVF   00,W
0BE0:  SUBLW  68
0BE1:  BTFSC  03.2
0BE2:  GOTO   3EC
0BE3:  MOVLW  03
0BE4:  ADDWF  2F,W
0BE5:  ADDLW  10
0BE6:  MOVWF  04
0BE7:  BSF    03.7
0BE8:  MOVF   00,W
0BE9:  SUBLW  48
0BEA:  BTFSS  03.2
0BEB:  GOTO   4D6
0BEC:  MOVLW  04
0BED:  ADDWF  2F,W
0BEE:  ADDLW  10
0BEF:  MOVWF  04
0BF0:  BSF    03.7
0BF1:  MOVF   00,W
0BF2:  SUBLW  65
0BF3:  BTFSC  03.2
0BF4:  GOTO   3FE
0BF5:  MOVLW  04
0BF6:  ADDWF  2F,W
0BF7:  ADDLW  10
0BF8:  MOVWF  04
0BF9:  BSF    03.7
0BFA:  MOVF   00,W
0BFB:  SUBLW  45
0BFC:  BTFSS  03.2
0BFD:  GOTO   4D6
0BFE:  MOVLW  05
0BFF:  ADDWF  2F,W
0C00:  ADDLW  10
0C01:  MOVWF  04
0C02:  BSF    03.7
0C03:  MOVF   00,W
0C04:  SUBLW  74
0C05:  BTFSC  03.2
0C06:  GOTO   410
0C07:  MOVLW  05
0C08:  ADDWF  2F,W
0C09:  ADDLW  10
0C0A:  MOVWF  04
0C0B:  BSF    03.7
0C0C:  MOVF   00,W
0C0D:  SUBLW  54
0C0E:  BTFSS  03.2
0C0F:  GOTO   4D6
.................... 				{ 
.................... 					_Blank(); 
0C10:  BCF    0A.3
0C11:  CALL   3EB
0C12:  BSF    0A.3
.................... 					lcd_gotoxy(1,1);					 
0C13:  MOVLW  01
0C14:  BSF    03.5
0C15:  BSF    03.6
0C16:  MOVWF  1F
0C17:  MOVWF  20
0C18:  BCF    0A.3
0C19:  BCF    03.5
0C1A:  BCF    03.6
0C1B:  CALL   374
0C1C:  BSF    0A.3
.................... 					printf(lcd_putc,"%c%c%c%c%c%c%c           ",sms[j],sms[j+1],sms[j+2],sms[j+3],sms[j+4],sms[j+5],sms[j+6]);	//sms[j+3]:Ten thiet bi can bat 
0C1D:  MOVLW  10
0C1E:  ADDWF  2F,W
0C1F:  MOVWF  04
0C20:  BSF    03.7
0C21:  MOVF   00,W
0C22:  BSF    03.5
0C23:  BSF    03.6
0C24:  MOVWF  10
0C25:  MOVLW  01
0C26:  BCF    03.5
0C27:  BCF    03.6
0C28:  ADDWF  2F,W
0C29:  ADDLW  10
0C2A:  MOVWF  04
0C2B:  BSF    03.7
0C2C:  MOVF   00,W
0C2D:  BSF    03.5
0C2E:  BSF    03.6
0C2F:  MOVWF  12
0C30:  MOVLW  02
0C31:  BCF    03.5
0C32:  BCF    03.6
0C33:  ADDWF  2F,W
0C34:  ADDLW  10
0C35:  MOVWF  04
0C36:  BSF    03.7
0C37:  MOVF   00,W
0C38:  BSF    03.5
0C39:  BSF    03.6
0C3A:  MOVWF  14
0C3B:  MOVLW  03
0C3C:  BCF    03.5
0C3D:  BCF    03.6
0C3E:  ADDWF  2F,W
0C3F:  ADDLW  10
0C40:  MOVWF  04
0C41:  BSF    03.7
0C42:  MOVF   00,W
0C43:  BSF    03.5
0C44:  BSF    03.6
0C45:  MOVWF  16
0C46:  MOVLW  04
0C47:  BCF    03.5
0C48:  BCF    03.6
0C49:  ADDWF  2F,W
0C4A:  ADDLW  10
0C4B:  MOVWF  04
0C4C:  BSF    03.7
0C4D:  MOVF   00,W
0C4E:  BSF    03.5
0C4F:  BSF    03.6
0C50:  MOVWF  18
0C51:  MOVLW  05
0C52:  BCF    03.5
0C53:  BCF    03.6
0C54:  ADDWF  2F,W
0C55:  ADDLW  10
0C56:  MOVWF  04
0C57:  BSF    03.7
0C58:  MOVF   00,W
0C59:  BSF    03.5
0C5A:  BSF    03.6
0C5B:  MOVWF  1A
0C5C:  MOVLW  06
0C5D:  BCF    03.5
0C5E:  BCF    03.6
0C5F:  ADDWF  2F,W
0C60:  ADDLW  10
0C61:  MOVWF  04
0C62:  BSF    03.7
0C63:  MOVF   00,W
0C64:  BSF    03.5
0C65:  BSF    03.6
0C66:  MOVWF  1C
0C67:  MOVF   10,W
0C68:  MOVWF  1E
0C69:  BCF    0A.3
0C6A:  BCF    03.5
0C6B:  BCF    03.6
0C6C:  CALL   39B
0C6D:  BSF    0A.3
0C6E:  BSF    03.5
0C6F:  BSF    03.6
0C70:  MOVF   12,W
0C71:  MOVWF  1E
0C72:  BCF    0A.3
0C73:  BCF    03.5
0C74:  BCF    03.6
0C75:  CALL   39B
0C76:  BSF    0A.3
0C77:  BSF    03.5
0C78:  BSF    03.6
0C79:  MOVF   14,W
0C7A:  MOVWF  1E
0C7B:  BCF    0A.3
0C7C:  BCF    03.5
0C7D:  BCF    03.6
0C7E:  CALL   39B
0C7F:  BSF    0A.3
0C80:  BSF    03.5
0C81:  BSF    03.6
0C82:  MOVF   16,W
0C83:  MOVWF  1E
0C84:  BCF    0A.3
0C85:  BCF    03.5
0C86:  BCF    03.6
0C87:  CALL   39B
0C88:  BSF    0A.3
0C89:  BSF    03.5
0C8A:  BSF    03.6
0C8B:  MOVF   18,W
0C8C:  MOVWF  1E
0C8D:  BCF    0A.3
0C8E:  BCF    03.5
0C8F:  BCF    03.6
0C90:  CALL   39B
0C91:  BSF    0A.3
0C92:  BSF    03.5
0C93:  BSF    03.6
0C94:  MOVF   1A,W
0C95:  MOVWF  1E
0C96:  BCF    0A.3
0C97:  BCF    03.5
0C98:  BCF    03.6
0C99:  CALL   39B
0C9A:  BSF    0A.3
0C9B:  BSF    03.5
0C9C:  BSF    03.6
0C9D:  MOVF   1C,W
0C9E:  MOVWF  1E
0C9F:  BCF    0A.3
0CA0:  BCF    03.5
0CA1:  BCF    03.6
0CA2:  CALL   39B
0CA3:  BSF    0A.3
0CA4:  MOVLW  0E
0CA5:  BSF    03.5
0CA6:  BSF    03.6
0CA7:  MOVWF  1D
0CA8:  MOVF   1D,W
0CA9:  BCF    0A.3
0CAA:  BCF    03.5
0CAB:  BCF    03.6
0CAC:  CALL   0E5
0CAD:  BSF    0A.3
0CAE:  BSF    03.5
0CAF:  BSF    03.6
0CB0:  INCF   1D,F
0CB1:  MOVWF  77
0CB2:  MOVWF  1E
0CB3:  BCF    0A.3
0CB4:  BCF    03.5
0CB5:  BCF    03.6
0CB6:  CALL   39B
0CB7:  BSF    0A.3
0CB8:  MOVLW  19
0CB9:  BSF    03.5
0CBA:  BSF    03.6
0CBB:  SUBWF  1D,W
0CBC:  BTFSS  03.2
0CBD:  GOTO   4A8
.................... 					_Delay(10);					 
0CBE:  MOVLW  0A
0CBF:  MOVWF  14
0CC0:  BCF    0A.3
0CC1:  BCF    03.5
0CC2:  BCF    03.6
0CC3:  CALL   3D8
0CC4:  BSF    0A.3
.................... 				 	_Turn_Off_All(); 
0CC5:  BCF    0A.3
0CC6:  CALL   230
0CC7:  BSF    0A.3
.................... 					_Reset_SMS(); 
0CC8:  BCF    0A.3
0CC9:  CALL   4DE
0CCA:  BSF    0A.3
.................... 					_Response(1);			 
0CCB:  MOVLW  01
0CCC:  BSF    03.5
0CCD:  BSF    03.6
0CCE:  MOVWF  10
0CCF:  BCF    0A.3
0CD0:  BCF    03.5
0CD1:  BCF    03.6
0CD2:  CALL   693
0CD3:  BSF    0A.3
.................... 					break; 
0CD4:  GOTO   69D
.................... 				}	 
.................... 				else if((sms[j]=='b'||sms[j]=='B')&&(sms[j+1]=='a'||sms[j+1]=='A')&&(sms[j+2]=='t'||sms[j+2]=='T')) 
0CD5:  GOTO   69B
0CD6:  MOVLW  10
0CD7:  ADDWF  2F,W
0CD8:  MOVWF  04
0CD9:  BSF    03.7
0CDA:  MOVF   00,W
0CDB:  SUBLW  62
0CDC:  BTFSC  03.2
0CDD:  GOTO   4E6
0CDE:  MOVLW  10
0CDF:  ADDWF  2F,W
0CE0:  MOVWF  04
0CE1:  BSF    03.7
0CE2:  MOVF   00,W
0CE3:  SUBLW  42
0CE4:  BTFSS  03.2
0CE5:  GOTO   5BA
0CE6:  MOVLW  01
0CE7:  ADDWF  2F,W
0CE8:  ADDLW  10
0CE9:  MOVWF  04
0CEA:  BSF    03.7
0CEB:  MOVF   00,W
0CEC:  SUBLW  61
0CED:  BTFSC  03.2
0CEE:  GOTO   4F8
0CEF:  MOVLW  01
0CF0:  ADDWF  2F,W
0CF1:  ADDLW  10
0CF2:  MOVWF  04
0CF3:  BSF    03.7
0CF4:  MOVF   00,W
0CF5:  SUBLW  41
0CF6:  BTFSS  03.2
0CF7:  GOTO   5BA
0CF8:  MOVLW  02
0CF9:  ADDWF  2F,W
0CFA:  ADDLW  10
0CFB:  MOVWF  04
0CFC:  BSF    03.7
0CFD:  MOVF   00,W
0CFE:  SUBLW  74
0CFF:  BTFSC  03.2
0D00:  GOTO   50A
0D01:  MOVLW  02
0D02:  ADDWF  2F,W
0D03:  ADDLW  10
0D04:  MOVWF  04
0D05:  BSF    03.7
0D06:  MOVF   00,W
0D07:  SUBLW  54
0D08:  BTFSS  03.2
0D09:  GOTO   5BA
.................... 				{ 
.................... 					lcd_gotoxy(1,1);					 
0D0A:  MOVLW  01
0D0B:  BSF    03.5
0D0C:  BSF    03.6
0D0D:  MOVWF  1F
0D0E:  MOVWF  20
0D0F:  BCF    0A.3
0D10:  BCF    03.5
0D11:  BCF    03.6
0D12:  CALL   374
0D13:  BSF    0A.3
.................... 					printf(lcd_putc,"%c%c%c%c%c             ",sms[j],sms[j+1],sms[j+2],sms[j+3],sms[j+4]);	//sms[j+3]:Ten thiet bi can bat 
0D14:  MOVLW  10
0D15:  ADDWF  2F,W
0D16:  MOVWF  04
0D17:  BSF    03.7
0D18:  MOVF   00,W
0D19:  BSF    03.5
0D1A:  BSF    03.6
0D1B:  MOVWF  10
0D1C:  MOVLW  01
0D1D:  BCF    03.5
0D1E:  BCF    03.6
0D1F:  ADDWF  2F,W
0D20:  ADDLW  10
0D21:  MOVWF  04
0D22:  BSF    03.7
0D23:  MOVF   00,W
0D24:  BSF    03.5
0D25:  BSF    03.6
0D26:  MOVWF  12
0D27:  MOVLW  02
0D28:  BCF    03.5
0D29:  BCF    03.6
0D2A:  ADDWF  2F,W
0D2B:  ADDLW  10
0D2C:  MOVWF  04
0D2D:  BSF    03.7
0D2E:  MOVF   00,W
0D2F:  BSF    03.5
0D30:  BSF    03.6
0D31:  MOVWF  14
0D32:  MOVLW  03
0D33:  BCF    03.5
0D34:  BCF    03.6
0D35:  ADDWF  2F,W
0D36:  ADDLW  10
0D37:  MOVWF  04
0D38:  BSF    03.7
0D39:  MOVF   00,W
0D3A:  BSF    03.5
0D3B:  BSF    03.6
0D3C:  MOVWF  16
0D3D:  MOVLW  04
0D3E:  BCF    03.5
0D3F:  BCF    03.6
0D40:  ADDWF  2F,W
0D41:  ADDLW  10
0D42:  MOVWF  04
0D43:  BSF    03.7
0D44:  MOVF   00,W
0D45:  BSF    03.5
0D46:  BSF    03.6
0D47:  MOVWF  18
0D48:  MOVF   10,W
0D49:  MOVWF  1E
0D4A:  BCF    0A.3
0D4B:  BCF    03.5
0D4C:  BCF    03.6
0D4D:  CALL   39B
0D4E:  BSF    0A.3
0D4F:  BSF    03.5
0D50:  BSF    03.6
0D51:  MOVF   12,W
0D52:  MOVWF  1E
0D53:  BCF    0A.3
0D54:  BCF    03.5
0D55:  BCF    03.6
0D56:  CALL   39B
0D57:  BSF    0A.3
0D58:  BSF    03.5
0D59:  BSF    03.6
0D5A:  MOVF   14,W
0D5B:  MOVWF  1E
0D5C:  BCF    0A.3
0D5D:  BCF    03.5
0D5E:  BCF    03.6
0D5F:  CALL   39B
0D60:  BSF    0A.3
0D61:  BSF    03.5
0D62:  BSF    03.6
0D63:  MOVF   16,W
0D64:  MOVWF  1E
0D65:  BCF    0A.3
0D66:  BCF    03.5
0D67:  BCF    03.6
0D68:  CALL   39B
0D69:  BSF    0A.3
0D6A:  BSF    03.5
0D6B:  BSF    03.6
0D6C:  MOVF   18,W
0D6D:  MOVWF  1E
0D6E:  BCF    0A.3
0D6F:  BCF    03.5
0D70:  BCF    03.6
0D71:  CALL   39B
0D72:  BSF    0A.3
0D73:  MOVLW  0A
0D74:  BSF    03.5
0D75:  BSF    03.6
0D76:  MOVWF  19
0D77:  MOVF   19,W
0D78:  BCF    0A.3
0D79:  BCF    03.5
0D7A:  BCF    03.6
0D7B:  CALL   106
0D7C:  BSF    0A.3
0D7D:  BSF    03.5
0D7E:  BSF    03.6
0D7F:  INCF   19,F
0D80:  MOVWF  77
0D81:  MOVWF  1E
0D82:  BCF    0A.3
0D83:  BCF    03.5
0D84:  BCF    03.6
0D85:  CALL   39B
0D86:  BSF    0A.3
0D87:  MOVLW  17
0D88:  BSF    03.5
0D89:  BSF    03.6
0D8A:  SUBWF  19,W
0D8B:  BTFSS  03.2
0D8C:  GOTO   577
.................... 					_Delay(10);					 
0D8D:  MOVLW  0A
0D8E:  MOVWF  14
0D8F:  BCF    0A.3
0D90:  BCF    03.5
0D91:  BCF    03.6
0D92:  CALL   3D8
0D93:  BSF    0A.3
.................... 					_Turn_On(sms[j+3]); 
0D94:  MOVLW  03
0D95:  ADDWF  2F,W
0D96:  ADDLW  10
0D97:  MOVWF  04
0D98:  BSF    03.7
0D99:  MOVF   00,W
0D9A:  BSF    03.5
0D9B:  BSF    03.6
0D9C:  MOVWF  11
0D9D:  MOVWF  12
0D9E:  BCF    0A.3
0D9F:  BCF    03.5
0DA0:  BCF    03.6
0DA1:  GOTO   770
0DA2:  BSF    0A.3
.................... 					_Delay(10); 
0DA3:  MOVLW  0A
0DA4:  BSF    03.5
0DA5:  BSF    03.6
0DA6:  MOVWF  14
0DA7:  BCF    0A.3
0DA8:  BCF    03.5
0DA9:  BCF    03.6
0DAA:  CALL   3D8
0DAB:  BSF    0A.3
.................... 					_Reset_SMS(); 
0DAC:  BCF    0A.3
0DAD:  CALL   4DE
0DAE:  BSF    0A.3
.................... 					_Response(1);			 
0DAF:  MOVLW  01
0DB0:  BSF    03.5
0DB1:  BSF    03.6
0DB2:  MOVWF  10
0DB3:  BCF    0A.3
0DB4:  BCF    03.5
0DB5:  BCF    03.6
0DB6:  CALL   693
0DB7:  BSF    0A.3
.................... 					break; 
0DB8:  GOTO   69D
.................... 				} 
.................... 				else if((sms[j]=='t'||sms[j]=='T')&&(sms[j+1]=='a'||sms[j+1]=='A')&&(sms[j+2]=='t'||sms[j+2]=='T')) 
0DB9:  GOTO   69B
0DBA:  MOVLW  10
0DBB:  ADDWF  2F,W
0DBC:  MOVWF  04
0DBD:  BSF    03.7
0DBE:  MOVF   00,W
0DBF:  SUBLW  74
0DC0:  BTFSC  03.2
0DC1:  GOTO   5CA
0DC2:  MOVLW  10
0DC3:  ADDWF  2F,W
0DC4:  MOVWF  04
0DC5:  BSF    03.7
0DC6:  MOVF   00,W
0DC7:  SUBLW  54
0DC8:  BTFSS  03.2
0DC9:  GOTO   69B
0DCA:  MOVLW  01
0DCB:  ADDWF  2F,W
0DCC:  ADDLW  10
0DCD:  MOVWF  04
0DCE:  BSF    03.7
0DCF:  MOVF   00,W
0DD0:  SUBLW  61
0DD1:  BTFSC  03.2
0DD2:  GOTO   5DC
0DD3:  MOVLW  01
0DD4:  ADDWF  2F,W
0DD5:  ADDLW  10
0DD6:  MOVWF  04
0DD7:  BSF    03.7
0DD8:  MOVF   00,W
0DD9:  SUBLW  41
0DDA:  BTFSS  03.2
0DDB:  GOTO   69B
0DDC:  MOVLW  02
0DDD:  ADDWF  2F,W
0DDE:  ADDLW  10
0DDF:  MOVWF  04
0DE0:  BSF    03.7
0DE1:  MOVF   00,W
0DE2:  SUBLW  74
0DE3:  BTFSC  03.2
0DE4:  GOTO   5EE
0DE5:  MOVLW  02
0DE6:  ADDWF  2F,W
0DE7:  ADDLW  10
0DE8:  MOVWF  04
0DE9:  BSF    03.7
0DEA:  MOVF   00,W
0DEB:  SUBLW  54
0DEC:  BTFSS  03.2
0DED:  GOTO   69B
.................... 				{ 
.................... 					lcd_gotoxy(1,1);					 
0DEE:  MOVLW  01
0DEF:  BSF    03.5
0DF0:  BSF    03.6
0DF1:  MOVWF  1F
0DF2:  MOVWF  20
0DF3:  BCF    0A.3
0DF4:  BCF    03.5
0DF5:  BCF    03.6
0DF6:  CALL   374
0DF7:  BSF    0A.3
.................... 					printf(lcd_putc,"%c%c%c%c%c             ",sms[j],sms[j+1],sms[j+2],sms[j+3],sms[j+4]);	//sms[j+3]:Ten thiet bi can bat 
0DF8:  MOVLW  10
0DF9:  ADDWF  2F,W
0DFA:  MOVWF  04
0DFB:  BSF    03.7
0DFC:  MOVF   00,W
0DFD:  BSF    03.5
0DFE:  BSF    03.6
0DFF:  MOVWF  10
0E00:  MOVLW  01
0E01:  BCF    03.5
0E02:  BCF    03.6
0E03:  ADDWF  2F,W
0E04:  ADDLW  10
0E05:  MOVWF  04
0E06:  BSF    03.7
0E07:  MOVF   00,W
0E08:  BSF    03.5
0E09:  BSF    03.6
0E0A:  MOVWF  12
0E0B:  MOVLW  02
0E0C:  BCF    03.5
0E0D:  BCF    03.6
0E0E:  ADDWF  2F,W
0E0F:  ADDLW  10
0E10:  MOVWF  04
0E11:  BSF    03.7
0E12:  MOVF   00,W
0E13:  BSF    03.5
0E14:  BSF    03.6
0E15:  MOVWF  14
0E16:  MOVLW  03
0E17:  BCF    03.5
0E18:  BCF    03.6
0E19:  ADDWF  2F,W
0E1A:  ADDLW  10
0E1B:  MOVWF  04
0E1C:  BSF    03.7
0E1D:  MOVF   00,W
0E1E:  BSF    03.5
0E1F:  BSF    03.6
0E20:  MOVWF  16
0E21:  MOVLW  04
0E22:  BCF    03.5
0E23:  BCF    03.6
0E24:  ADDWF  2F,W
0E25:  ADDLW  10
0E26:  MOVWF  04
0E27:  BSF    03.7
0E28:  MOVF   00,W
0E29:  BSF    03.5
0E2A:  BSF    03.6
0E2B:  MOVWF  18
0E2C:  MOVF   10,W
0E2D:  MOVWF  1E
0E2E:  BCF    0A.3
0E2F:  BCF    03.5
0E30:  BCF    03.6
0E31:  CALL   39B
0E32:  BSF    0A.3
0E33:  BSF    03.5
0E34:  BSF    03.6
0E35:  MOVF   12,W
0E36:  MOVWF  1E
0E37:  BCF    0A.3
0E38:  BCF    03.5
0E39:  BCF    03.6
0E3A:  CALL   39B
0E3B:  BSF    0A.3
0E3C:  BSF    03.5
0E3D:  BSF    03.6
0E3E:  MOVF   14,W
0E3F:  MOVWF  1E
0E40:  BCF    0A.3
0E41:  BCF    03.5
0E42:  BCF    03.6
0E43:  CALL   39B
0E44:  BSF    0A.3
0E45:  BSF    03.5
0E46:  BSF    03.6
0E47:  MOVF   16,W
0E48:  MOVWF  1E
0E49:  BCF    0A.3
0E4A:  BCF    03.5
0E4B:  BCF    03.6
0E4C:  CALL   39B
0E4D:  BSF    0A.3
0E4E:  BSF    03.5
0E4F:  BSF    03.6
0E50:  MOVF   18,W
0E51:  MOVWF  1E
0E52:  BCF    0A.3
0E53:  BCF    03.5
0E54:  BCF    03.6
0E55:  CALL   39B
0E56:  BSF    0A.3
0E57:  MOVLW  0A
0E58:  BSF    03.5
0E59:  BSF    03.6
0E5A:  MOVWF  19
0E5B:  MOVF   19,W
0E5C:  BCF    0A.3
0E5D:  BCF    03.5
0E5E:  BCF    03.6
0E5F:  CALL   106
0E60:  BSF    0A.3
0E61:  BSF    03.5
0E62:  BSF    03.6
0E63:  INCF   19,F
0E64:  MOVWF  77
0E65:  MOVWF  1E
0E66:  BCF    0A.3
0E67:  BCF    03.5
0E68:  BCF    03.6
0E69:  CALL   39B
0E6A:  BSF    0A.3
0E6B:  MOVLW  17
0E6C:  BSF    03.5
0E6D:  BSF    03.6
0E6E:  SUBWF  19,W
0E6F:  BTFSS  03.2
0E70:  GOTO   65B
.................... 					_Delay(10);						 
0E71:  MOVLW  0A
0E72:  MOVWF  14
0E73:  BCF    0A.3
0E74:  BCF    03.5
0E75:  BCF    03.6
0E76:  CALL   3D8
0E77:  BSF    0A.3
.................... 					_Turn_Off(sms[j+3]); 
0E78:  MOVLW  03
0E79:  ADDWF  2F,W
0E7A:  ADDLW  10
0E7B:  MOVWF  04
0E7C:  BSF    03.7
0E7D:  MOVF   00,W
0E7E:  BSF    03.5
0E7F:  BSF    03.6
0E80:  MOVWF  11
0E81:  MOVWF  12
0E82:  BCF    03.5
0E83:  BCF    03.6
0E84:  GOTO   000
.................... 					_Delay(10); 
0E85:  MOVLW  0A
0E86:  BSF    03.5
0E87:  BSF    03.6
0E88:  MOVWF  14
0E89:  BCF    0A.3
0E8A:  BCF    03.5
0E8B:  BCF    03.6
0E8C:  CALL   3D8
0E8D:  BSF    0A.3
.................... 					_Reset_SMS(); 
0E8E:  BCF    0A.3
0E8F:  CALL   4DE
0E90:  BSF    0A.3
.................... 					_Response(1); 
0E91:  MOVLW  01
0E92:  BSF    03.5
0E93:  BSF    03.6
0E94:  MOVWF  10
0E95:  BCF    0A.3
0E96:  BCF    03.5
0E97:  BCF    03.6
0E98:  CALL   693
0E99:  BSF    0A.3
.................... 					break; 
0E9A:  GOTO   69D
.................... 				}						 
.................... 			} 
0E9B:  INCF   2F,F
0E9C:  GOTO   1BA
.................... 			_Delay(5);_Display();_Blank(); 
0E9D:  MOVLW  05
0E9E:  BSF    03.5
0E9F:  BSF    03.6
0EA0:  MOVWF  14
0EA1:  BCF    0A.3
0EA2:  BCF    03.5
0EA3:  BCF    03.6
0EA4:  CALL   3D8
0EA5:  BSF    0A.3
0EA6:  BCF    0A.3
0EA7:  CALL   4FF
0EA8:  BSF    0A.3
0EA9:  BCF    0A.3
0EAA:  CALL   3EB
0EAB:  BSF    0A.3
.................... 		}		 
.................... 	} 
0EAC:  GOTO   0C7
.................... } 
.................... /***************************************************************/ 
.................... /***************************************************************/ 
.................... void _Delete_SMS() 
.................... { 
0EAD:  SLEEP
....................   	printf("AT+CMGD=1,4\r\n"); 
*
0679:  BSF    03.6
067A:  CLRF   6A
067B:  MOVF   6A,W
067C:  BCF    03.6
067D:  CALL   122
067E:  BSF    03.6
067F:  INCF   6A,F
0680:  MOVWF  77
0681:  BCF    03.6
0682:  BTFSS  0C.4
0683:  GOTO   682
0684:  MOVWF  19
0685:  MOVLW  0D
0686:  BSF    03.6
0687:  SUBWF  6A,W
0688:  BTFSS  03.2
0689:  GOTO   67B
....................   	_Delay(5); 
068A:  MOVLW  05
068B:  BSF    03.5
068C:  MOVWF  14
068D:  BCF    03.5
068E:  BCF    03.6
068F:  CALL   3D8
.................... } 
0690:  BSF    0A.3
0691:  BCF    0A.4
0692:  GOTO   259 (RETURN)
....................  
.................... void _Reset_SMS() 
.................... { 
.................... 	int k; 
.................... 	for(k=0;k<90;k++) 
*
04DE:  BSF    03.5
04DF:  BSF    03.6
04E0:  CLRF   10
04E1:  MOVF   10,W
04E2:  SUBLW  59
04E3:  BTFSS  03.0
04E4:  GOTO   4EC
.................... 	{ 
.................... 		sms[k]='\0'; 
04E5:  MOVLW  10
04E6:  ADDWF  10,W
04E7:  MOVWF  04
04E8:  BSF    03.7
04E9:  CLRF   00
.................... 	} 
04EA:  INCF   10,F
04EB:  GOTO   4E1
.................... 	c1=c2=c3=c4='\0'; 
04EC:  BCF    03.5
04ED:  BCF    03.6
04EE:  CLRF   2C
04EF:  MOVF   2C,W
04F0:  MOVWF  2B
04F1:  MOVWF  2A
04F2:  MOVWF  29
.................... 	new_sms=0; 
04F3:  CLRF   2D
.................... 	index=0; 
04F4:  CLRF   31
.................... 	interrupt=0; 
04F5:  CLRF   32
.................... 	i=j=k=0; 
04F6:  BSF    03.5
04F7:  BSF    03.6
04F8:  CLRF   10
04F9:  MOVF   10,W
04FA:  BCF    03.5
04FB:  BCF    03.6
04FC:  MOVWF  2F
04FD:  MOVWF  2E
.................... } 
04FE:  RETLW  00
....................  
.................... void _Response(char style) 
.................... { 
.................... 	if(style==1) 
*
0693:  BSF    03.5
0694:  BSF    03.6
0695:  DECFSZ 10,W
0696:  GOTO   6E5
.................... 	{ 
.................... 		printf("AT+CMGS=\"01639091561\"\r\n"); 
0697:  CLRF   11
0698:  MOVF   11,W
0699:  BCF    03.5
069A:  BCF    03.6
069B:  CALL   134
069C:  BSF    03.5
069D:  BSF    03.6
069E:  INCF   11,F
069F:  MOVWF  77
06A0:  BCF    03.5
06A1:  BCF    03.6
06A2:  BTFSS  0C.4
06A3:  GOTO   6A2
06A4:  MOVWF  19
06A5:  MOVLW  17
06A6:  BSF    03.5
06A7:  BSF    03.6
06A8:  SUBWF  11,W
06A9:  BTFSS  03.2
06AA:  GOTO   698
.................... 	  	_Delay(5); 
06AB:  MOVLW  05
06AC:  MOVWF  14
06AD:  BCF    03.5
06AE:  BCF    03.6
06AF:  CALL   3D8
.................... 		printf("1%c2%c3%c4%c",st[0],st[1],st[2],st[3]); 
06B0:  MOVLW  31
06B1:  BTFSS  0C.4
06B2:  GOTO   6B1
06B3:  MOVWF  19
06B4:  MOVF   34,W
06B5:  BTFSS  0C.4
06B6:  GOTO   6B5
06B7:  MOVWF  19
06B8:  MOVLW  32
06B9:  BTFSS  0C.4
06BA:  GOTO   6B9
06BB:  MOVWF  19
06BC:  MOVF   35,W
06BD:  BTFSS  0C.4
06BE:  GOTO   6BD
06BF:  MOVWF  19
06C0:  MOVLW  33
06C1:  BTFSS  0C.4
06C2:  GOTO   6C1
06C3:  MOVWF  19
06C4:  MOVF   36,W
06C5:  BTFSS  0C.4
06C6:  GOTO   6C5
06C7:  MOVWF  19
06C8:  MOVLW  34
06C9:  BTFSS  0C.4
06CA:  GOTO   6C9
06CB:  MOVWF  19
06CC:  MOVF   37,W
06CD:  BTFSS  0C.4
06CE:  GOTO   6CD
06CF:  MOVWF  19
.................... 	  	_Delay(5); 
06D0:  MOVLW  05
06D1:  BSF    03.5
06D2:  BSF    03.6
06D3:  MOVWF  14
06D4:  BCF    03.5
06D5:  BCF    03.6
06D6:  CALL   3D8
.................... 	  	putc(26); 
06D7:  MOVLW  1A
06D8:  BTFSS  0C.4
06D9:  GOTO   6D8
06DA:  MOVWF  19
.................... 	  	_Delay(5);	 
06DB:  MOVLW  05
06DC:  BSF    03.5
06DD:  BSF    03.6
06DE:  MOVWF  14
06DF:  BCF    03.5
06E0:  BCF    03.6
06E1:  CALL   3D8
.................... 	} 
.................... 	else if(style==2) 
06E2:  GOTO   728
06E3:  BSF    03.5
06E4:  BSF    03.6
06E5:  MOVF   10,W
06E6:  SUBLW  02
06E7:  BTFSS  03.2
06E8:  GOTO   72A
.................... 	{ 
.................... 		printf("AT+CMGS=\"01639091561\"\r\n"); 
06E9:  CLRF   11
06EA:  MOVF   11,W
06EB:  BCF    03.5
06EC:  BCF    03.6
06ED:  CALL   134
06EE:  BSF    03.5
06EF:  BSF    03.6
06F0:  INCF   11,F
06F1:  MOVWF  77
06F2:  BCF    03.5
06F3:  BCF    03.6
06F4:  BTFSS  0C.4
06F5:  GOTO   6F4
06F6:  MOVWF  19
06F7:  MOVLW  17
06F8:  BSF    03.5
06F9:  BSF    03.6
06FA:  SUBWF  11,W
06FB:  BTFSS  03.2
06FC:  GOTO   6EA
.................... 	  	_Delay(5); 
06FD:  MOVLW  05
06FE:  MOVWF  14
06FF:  BCF    03.5
0700:  BCF    03.6
0701:  CALL   3D8
.................... 		printf("Delete Successfully!"); 
0702:  BSF    03.5
0703:  BSF    03.6
0704:  CLRF   11
0705:  MOVF   11,W
0706:  BCF    03.5
0707:  BCF    03.6
0708:  CALL   150
0709:  BSF    03.5
070A:  BSF    03.6
070B:  INCF   11,F
070C:  MOVWF  77
070D:  BCF    03.5
070E:  BCF    03.6
070F:  BTFSS  0C.4
0710:  GOTO   70F
0711:  MOVWF  19
0712:  MOVLW  14
0713:  BSF    03.5
0714:  BSF    03.6
0715:  SUBWF  11,W
0716:  BTFSS  03.2
0717:  GOTO   705
.................... 	  	_Delay(5); 
0718:  MOVLW  05
0719:  MOVWF  14
071A:  BCF    03.5
071B:  BCF    03.6
071C:  CALL   3D8
.................... 	  	putc(26); 
071D:  MOVLW  1A
071E:  BTFSS  0C.4
071F:  GOTO   71E
0720:  MOVWF  19
.................... 	  	_Delay(5);	 
0721:  MOVLW  05
0722:  BSF    03.5
0723:  BSF    03.6
0724:  MOVWF  14
0725:  BCF    03.5
0726:  BCF    03.6
0727:  CALL   3D8
0728:  BSF    03.5
0729:  BSF    03.6
.................... 	} 
.................... } 
072A:  BCF    03.5
072B:  BCF    03.6
072C:  RETLW  00
....................  
.................... void _Send_SMS(unsigned char style) 
.................... { 
.................... 	printf("AT+CMGS=\"01639091561\"\r\n"); 
*
05BF:  BSF    03.5
05C0:  BSF    03.6
05C1:  CLRF   11
05C2:  MOVF   11,W
05C3:  BCF    03.5
05C4:  BCF    03.6
05C5:  CALL   134
05C6:  BSF    03.5
05C7:  BSF    03.6
05C8:  INCF   11,F
05C9:  MOVWF  77
05CA:  BCF    03.5
05CB:  BCF    03.6
05CC:  BTFSS  0C.4
05CD:  GOTO   5CC
05CE:  MOVWF  19
05CF:  MOVLW  17
05D0:  BSF    03.5
05D1:  BSF    03.6
05D2:  SUBWF  11,W
05D3:  BTFSS  03.2
05D4:  GOTO   5C2
....................   	_Delay(5); 
05D5:  MOVLW  05
05D6:  MOVWF  14
05D7:  BCF    03.5
05D8:  BCF    03.6
05D9:  CALL   3D8
.................... 	switch(style) 
.................... 	{ 
05DA:  BSF    03.5
05DB:  BSF    03.6
05DC:  MOVF   10,W
05DD:  XORLW  01
05DE:  BCF    03.5
05DF:  BCF    03.6
05E0:  BTFSC  03.2
05E1:  GOTO   5E9
05E2:  XORLW  03
05E3:  BTFSC  03.2
05E4:  GOTO   602
05E5:  XORLW  01
05E6:  BTFSC  03.2
05E7:  GOTO   60F
05E8:  GOTO   628
.................... 		case 1: 
.................... 		{ 
.................... 			printf("I Am Ready!\r\nPlease Give Me Order! "); 
05E9:  BSF    03.5
05EA:  BSF    03.6
05EB:  CLRF   11
05EC:  MOVF   11,W
05ED:  BCF    03.5
05EE:  BCF    03.6
05EF:  CALL   169
05F0:  BSF    03.5
05F1:  BSF    03.6
05F2:  INCF   11,F
05F3:  MOVWF  77
05F4:  BCF    03.5
05F5:  BCF    03.6
05F6:  BTFSS  0C.4
05F7:  GOTO   5F6
05F8:  MOVWF  19
05F9:  MOVLW  23
05FA:  BSF    03.5
05FB:  BSF    03.6
05FC:  SUBWF  11,W
05FD:  BTFSS  03.2
05FE:  GOTO   5EC
.................... 			break; 
05FF:  BCF    03.5
0600:  BCF    03.6
0601:  GOTO   628
.................... 		} 
.................... 		case 2: 
.................... 		{ 
.................... 			printf("OK "); 
0602:  MOVLW  4F
0603:  BTFSS  0C.4
0604:  GOTO   603
0605:  MOVWF  19
0606:  MOVLW  4B
0607:  BTFSS  0C.4
0608:  GOTO   607
0609:  MOVWF  19
060A:  MOVLW  20
060B:  BTFSS  0C.4
060C:  GOTO   60B
060D:  MOVWF  19
.................... 			break; 
060E:  GOTO   628
.................... 		} 
.................... 		case 3: 
.................... 		{ 
.................... 			printf("Error"); 
060F:  BSF    03.5
0610:  BSF    03.6
0611:  CLRF   11
0612:  MOVF   11,W
0613:  BCF    03.5
0614:  BCF    03.6
0615:  CALL   191
0616:  BSF    03.5
0617:  BSF    03.6
0618:  INCF   11,F
0619:  MOVWF  77
061A:  BCF    03.5
061B:  BCF    03.6
061C:  BTFSS  0C.4
061D:  GOTO   61C
061E:  MOVWF  19
061F:  MOVLW  05
0620:  BSF    03.5
0621:  BSF    03.6
0622:  SUBWF  11,W
0623:  BTFSS  03.2
0624:  GOTO   612
.................... 			break; 
0625:  BCF    03.5
0626:  BCF    03.6
0627:  GOTO   628
.................... 		} 
.................... 	} 
....................   	_Delay(5); 
0628:  MOVLW  05
0629:  BSF    03.5
062A:  BSF    03.6
062B:  MOVWF  14
062C:  BCF    03.5
062D:  BCF    03.6
062E:  CALL   3D8
....................   	putc(26); 
062F:  MOVLW  1A
0630:  BTFSS  0C.4
0631:  GOTO   630
0632:  MOVWF  19
....................   	_Delay(5); 
0633:  MOVLW  05
0634:  BSF    03.5
0635:  BSF    03.6
0636:  MOVWF  14
0637:  BCF    03.5
0638:  BCF    03.6
0639:  CALL   3D8
.................... } 
063A:  BSF    0A.3
063B:  BCF    0A.4
063C:  GOTO   0A8 (RETURN)
....................  
.................... void _Delay(int n) 
.................... { 
.................... 	int i; 
.................... 	for(i=0;i<n;i++) 
*
03D8:  BSF    03.5
03D9:  BSF    03.6
03DA:  CLRF   15
03DB:  MOVF   14,W
03DC:  SUBWF  15,W
03DD:  BTFSC  03.0
03DE:  GOTO   3E8
.................... 	{ 
.................... 		delay_ms(100); 
03DF:  MOVLW  64
03E0:  MOVWF  1F
03E1:  BCF    03.5
03E2:  BCF    03.6
03E3:  CALL   272
.................... 	} 
03E4:  BSF    03.5
03E5:  BSF    03.6
03E6:  INCF   15,F
03E7:  GOTO   3DB
.................... } 
03E8:  BCF    03.5
03E9:  BCF    03.6
03EA:  RETLW  00
....................  
.................... void _Waiting_SIM(void) 
.................... { 
....................   	lcd_gotoxy(1,1); 
*
045A:  MOVLW  01
045B:  BSF    03.5
045C:  BSF    03.6
045D:  MOVWF  1F
045E:  MOVWF  20
045F:  BCF    03.5
0460:  BCF    03.6
0461:  CALL   374
.................... 	printf(lcd_putc,"I Am Busy "); 
0462:  BSF    03.6
0463:  CLRF   6A
0464:  MOVF   6A,W
0465:  BCF    03.6
0466:  CALL   19B
0467:  BSF    03.6
0468:  INCF   6A,F
0469:  MOVWF  77
046A:  BSF    03.5
046B:  MOVWF  1E
046C:  BCF    03.5
046D:  BCF    03.6
046E:  CALL   39B
046F:  MOVLW  0A
0470:  BSF    03.6
0471:  SUBWF  6A,W
0472:  BTFSS  03.2
0473:  GOTO   464
.................... 	_Delay(30); 
0474:  MOVLW  1E
0475:  BSF    03.5
0476:  MOVWF  14
0477:  BCF    03.5
0478:  BCF    03.6
0479:  CALL   3D8
....................   	lcd_gotoxy(1,1); 
047A:  MOVLW  01
047B:  BSF    03.5
047C:  BSF    03.6
047D:  MOVWF  1F
047E:  MOVWF  20
047F:  BCF    03.5
0480:  BCF    03.6
0481:  CALL   374
.................... 	printf(lcd_putc,"I Am Busy. "); 
0482:  BSF    03.6
0483:  CLRF   6A
0484:  MOVF   6A,W
0485:  BCF    03.6
0486:  CALL   1AA
0487:  BSF    03.6
0488:  INCF   6A,F
0489:  MOVWF  77
048A:  BSF    03.5
048B:  MOVWF  1E
048C:  BCF    03.5
048D:  BCF    03.6
048E:  CALL   39B
048F:  MOVLW  0B
0490:  BSF    03.6
0491:  SUBWF  6A,W
0492:  BTFSS  03.2
0493:  GOTO   484
.................... 	_Delay(30); 
0494:  MOVLW  1E
0495:  BSF    03.5
0496:  MOVWF  14
0497:  BCF    03.5
0498:  BCF    03.6
0499:  CALL   3D8
....................   	lcd_gotoxy(1,1); 
049A:  MOVLW  01
049B:  BSF    03.5
049C:  BSF    03.6
049D:  MOVWF  1F
049E:  MOVWF  20
049F:  BCF    03.5
04A0:  BCF    03.6
04A1:  CALL   374
.................... 	printf(lcd_putc,"I Am Busy.. "); 
04A2:  BSF    03.6
04A3:  CLRF   6A
04A4:  MOVF   6A,W
04A5:  BCF    03.6
04A6:  CALL   1BA
04A7:  BSF    03.6
04A8:  INCF   6A,F
04A9:  MOVWF  77
04AA:  BSF    03.5
04AB:  MOVWF  1E
04AC:  BCF    03.5
04AD:  BCF    03.6
04AE:  CALL   39B
04AF:  MOVLW  0C
04B0:  BSF    03.6
04B1:  SUBWF  6A,W
04B2:  BTFSS  03.2
04B3:  GOTO   4A4
.................... 	_Delay(20); 
04B4:  MOVLW  14
04B5:  BSF    03.5
04B6:  MOVWF  14
04B7:  BCF    03.5
04B8:  BCF    03.6
04B9:  CALL   3D8
....................   	lcd_gotoxy(1,1); 
04BA:  MOVLW  01
04BB:  BSF    03.5
04BC:  BSF    03.6
04BD:  MOVWF  1F
04BE:  MOVWF  20
04BF:  BCF    03.5
04C0:  BCF    03.6
04C1:  CALL   374
.................... 	printf(lcd_putc,"I Am Busy... "); 
04C2:  BSF    03.6
04C3:  CLRF   6A
04C4:  MOVF   6A,W
04C5:  BCF    03.6
04C6:  CALL   1CB
04C7:  BSF    03.6
04C8:  INCF   6A,F
04C9:  MOVWF  77
04CA:  BSF    03.5
04CB:  MOVWF  1E
04CC:  BCF    03.5
04CD:  BCF    03.6
04CE:  CALL   39B
04CF:  MOVLW  0D
04D0:  BSF    03.6
04D1:  SUBWF  6A,W
04D2:  BTFSS  03.2
04D3:  GOTO   4C4
.................... 	_Delay(20); 
04D4:  MOVLW  14
04D5:  BSF    03.5
04D6:  MOVWF  14
04D7:  BCF    03.5
04D8:  BCF    03.6
04D9:  CALL   3D8
.................... 	_Turn_Off_All(); 
04DA:  CALL   230
.................... } 
04DB:  BSF    0A.3
04DC:  BCF    0A.4
04DD:  GOTO   093 (RETURN)
....................  
.................... void _Turn_Off(char name) 
.................... { 
.................... 	int delay=1; 
*
0800:  MOVLW  01
0801:  BSF    03.5
0802:  BSF    03.6
0803:  MOVWF  13
.................... 	switch(name) 
.................... 	{ 
0804:  MOVF   12,W
0805:  XORLW  31
0806:  BCF    03.5
0807:  BCF    03.6
0808:  BTFSC  03.2
0809:  GOTO   014
080A:  XORLW  03
080B:  BTFSC  03.2
080C:  GOTO   026
080D:  XORLW  01
080E:  BTFSC  03.2
080F:  GOTO   038
0810:  XORLW  07
0811:  BTFSC  03.2
0812:  GOTO   04A
0813:  GOTO   05C
.................... 		case'1': 
.................... 		{ 
.................... 			output_high(PIN_C0); 
0814:  BCF    38.0
0815:  MOVF   38,W
0816:  BSF    03.5
0817:  MOVWF  07
0818:  BCF    03.5
0819:  BSF    07.0
.................... 			st[0]='0'; 
081A:  MOVLW  30
081B:  MOVWF  34
.................... 			_Delay(delay); 
081C:  BSF    03.5
081D:  BSF    03.6
081E:  MOVF   13,W
081F:  MOVWF  14
0820:  BCF    0A.3
0821:  BCF    03.5
0822:  BCF    03.6
0823:  CALL   3D8
0824:  BSF    0A.3
.................... 			break; 
0825:  GOTO   05D
.................... 		} 
.................... 		case'2': 
.................... 		{ 
.................... 			output_high(PIN_C1); 
0826:  BCF    38.1
0827:  MOVF   38,W
0828:  BSF    03.5
0829:  MOVWF  07
082A:  BCF    03.5
082B:  BSF    07.1
.................... 			st[1]='0'; 
082C:  MOVLW  30
082D:  MOVWF  35
.................... 			_Delay(delay); 
082E:  BSF    03.5
082F:  BSF    03.6
0830:  MOVF   13,W
0831:  MOVWF  14
0832:  BCF    0A.3
0833:  BCF    03.5
0834:  BCF    03.6
0835:  CALL   3D8
0836:  BSF    0A.3
.................... 			break; 
0837:  GOTO   05D
.................... 		} 
.................... 		case'3': 
.................... 		{ 
.................... 			output_high(PIN_C2); 
0838:  BCF    38.2
0839:  MOVF   38,W
083A:  BSF    03.5
083B:  MOVWF  07
083C:  BCF    03.5
083D:  BSF    07.2
.................... 			st[2]='0'; 
083E:  MOVLW  30
083F:  MOVWF  36
.................... 			_Delay(delay); 
0840:  BSF    03.5
0841:  BSF    03.6
0842:  MOVF   13,W
0843:  MOVWF  14
0844:  BCF    0A.3
0845:  BCF    03.5
0846:  BCF    03.6
0847:  CALL   3D8
0848:  BSF    0A.3
.................... 			break; 
0849:  GOTO   05D
.................... 		} 
.................... 		case'4': 
.................... 		{ 
.................... 			output_high(PIN_C3); 
084A:  BCF    38.3
084B:  MOVF   38,W
084C:  BSF    03.5
084D:  MOVWF  07
084E:  BCF    03.5
084F:  BSF    07.3
.................... 			st[3]='0'; 
0850:  MOVLW  30
0851:  MOVWF  37
.................... 			_Delay(delay); 
0852:  BSF    03.5
0853:  BSF    03.6
0854:  MOVF   13,W
0855:  MOVWF  14
0856:  BCF    0A.3
0857:  BCF    03.5
0858:  BCF    03.6
0859:  CALL   3D8
085A:  BSF    0A.3
.................... 			break; 
085B:  GOTO   05D
.................... 		}	 
.................... 		default: 
.................... 		{ 
....................  
.................... 			break; 
085C:  GOTO   05D
.................... 		}	 
.................... 	} 
.................... } 
085D:  BSF    0A.3
085E:  BCF    0A.4
085F:  GOTO   685 (RETURN)
....................  
.................... void _Turn_On(char name) 
.................... { 
.................... 	int delay=1; 
*
0770:  MOVLW  01
0771:  BSF    03.5
0772:  BSF    03.6
0773:  MOVWF  13
.................... 	switch(name) 
.................... 	{ 
0774:  MOVF   12,W
0775:  XORLW  31
0776:  BCF    03.5
0777:  BCF    03.6
0778:  BTFSC  03.2
0779:  GOTO   784
077A:  XORLW  03
077B:  BTFSC  03.2
077C:  GOTO   794
077D:  XORLW  01
077E:  BTFSC  03.2
077F:  GOTO   7A4
0780:  XORLW  07
0781:  BTFSC  03.2
0782:  GOTO   7B4
0783:  GOTO   7C4
.................... 		case'1': 
.................... 		{ 
.................... 			output_low(PIN_C0); 
0784:  BCF    38.0
0785:  MOVF   38,W
0786:  BSF    03.5
0787:  MOVWF  07
0788:  BCF    03.5
0789:  BCF    07.0
.................... 			st[0]='#'; 
078A:  MOVLW  23
078B:  MOVWF  34
.................... 			_Delay(delay); 
078C:  BSF    03.5
078D:  BSF    03.6
078E:  MOVF   13,W
078F:  MOVWF  14
0790:  BCF    03.5
0791:  BCF    03.6
0792:  CALL   3D8
.................... 			break; 
0793:  GOTO   7C5
.................... 		} 
.................... 		case'2': 
.................... 		{ 
.................... 			output_low(PIN_C1); 
0794:  BCF    38.1
0795:  MOVF   38,W
0796:  BSF    03.5
0797:  MOVWF  07
0798:  BCF    03.5
0799:  BCF    07.1
.................... 			st[1]='#'; 
079A:  MOVLW  23
079B:  MOVWF  35
.................... 			_Delay(delay); 
079C:  BSF    03.5
079D:  BSF    03.6
079E:  MOVF   13,W
079F:  MOVWF  14
07A0:  BCF    03.5
07A1:  BCF    03.6
07A2:  CALL   3D8
.................... 			break; 
07A3:  GOTO   7C5
.................... 		} 
.................... 		case'3': 
.................... 		{ 
.................... 			output_low(PIN_C2); 
07A4:  BCF    38.2
07A5:  MOVF   38,W
07A6:  BSF    03.5
07A7:  MOVWF  07
07A8:  BCF    03.5
07A9:  BCF    07.2
.................... 			st[2]='#'; 
07AA:  MOVLW  23
07AB:  MOVWF  36
.................... 			_Delay(delay); 
07AC:  BSF    03.5
07AD:  BSF    03.6
07AE:  MOVF   13,W
07AF:  MOVWF  14
07B0:  BCF    03.5
07B1:  BCF    03.6
07B2:  CALL   3D8
.................... 			break; 
07B3:  GOTO   7C5
.................... 		} 
.................... 		case'4': 
.................... 		{ 
.................... 			output_low(PIN_C3); 
07B4:  BCF    38.3
07B5:  MOVF   38,W
07B6:  BSF    03.5
07B7:  MOVWF  07
07B8:  BCF    03.5
07B9:  BCF    07.3
.................... 			st[3]='#'; 
07BA:  MOVLW  23
07BB:  MOVWF  37
.................... 			_Delay(delay); 
07BC:  BSF    03.5
07BD:  BSF    03.6
07BE:  MOVF   13,W
07BF:  MOVWF  14
07C0:  BCF    03.5
07C1:  BCF    03.6
07C2:  CALL   3D8
.................... 			break; 
07C3:  GOTO   7C5
.................... 		} 
.................... 		default: 
.................... 		{ 
....................  
.................... 			break; 
07C4:  GOTO   7C5
.................... 		}	 
.................... 	} 
.................... } 
07C5:  BSF    0A.3
07C6:  BCF    0A.4
07C7:  GOTO   5A2 (RETURN)
....................  
.................... void _Startup() 
.................... { 
.................... 	PORT_B_PULLUPS(0xFF); 
*
03FA:  MOVLW  FF
03FB:  BSF    03.5
03FC:  MOVWF  15
03FD:  BCF    01.7
.................... 	ENABLE_INTERRUPTS(INT_RDA);  
03FE:  BSF    0C.5
.................... 	ENABLE_INTERRUPTS(GLOBAL);  
03FF:  MOVLW  C0
0400:  BCF    03.5
0401:  IORWF  0B,F
.................... 	output_high(PIN_A0); 
0402:  BSF    03.5
0403:  BCF    05.0
0404:  BCF    03.5
0405:  BSF    05.0
....................    	_Turn_Off_All(); 
0406:  CALL   230
....................   	lcd_init(); 
.................... 	_Blank(); 
*
0455:  BCF    03.6
0456:  CALL   3EB
.................... } 
0457:  BSF    0A.3
0458:  BCF    0A.4
0459:  GOTO   090 (RETURN)
....................  
.................... void _Configuration_Sim() 
.................... { 
.................... 	printf("AT\r\n");_Delay(3);_Display(); 
*
0581:  BSF    03.5
0582:  BSF    03.6
0583:  CLRF   10
0584:  MOVF   10,W
0585:  BCF    03.5
0586:  BCF    03.6
0587:  CALL   1DD
0588:  BSF    03.5
0589:  BSF    03.6
058A:  INCF   10,F
058B:  MOVWF  77
058C:  BCF    03.5
058D:  BCF    03.6
058E:  BTFSS  0C.4
058F:  GOTO   58E
0590:  MOVWF  19
0591:  MOVLW  04
0592:  BSF    03.5
0593:  BSF    03.6
0594:  SUBWF  10,W
0595:  BTFSS  03.2
0596:  GOTO   584
0597:  MOVLW  03
0598:  MOVWF  14
0599:  BCF    03.5
059A:  BCF    03.6
059B:  CALL   3D8
059C:  CALL   4FF
.................... 	_Turn_Off_All(); 
059D:  CALL   230
.................... //	printf("ATZ\r\n");_Delay(3);_Display(); 
.................... //	printf("ATE1\r\n");_Delay(3);_Display(); 
.................... //	printf("AT+ICF=3,3\r\n");_Delay(3);_Display(); 
.................... //	printf("AT+IPR=9600\r\n");_Delay(5);_Display(); 
.................... //	printf("AT&W\r\n");_Delay(5);_Display(); 
.................... //	printf("AT+CMGF=1\r\n");_Delay(3);_Display(); 
.................... //	printf("AT+CNMI=2,2,0,0,0\r\n");_Delay(5);_Display(); 
.................... //	printf("AT+CSAS\r\n");_Delay(5);_Display(); 
.................... 	printf("AT+CMGD=1,4\r\n");_Delay(5);_Display();_Blank(); 
059E:  BSF    03.5
059F:  BSF    03.6
05A0:  CLRF   10
05A1:  MOVF   10,W
05A2:  BCF    03.5
05A3:  BCF    03.6
05A4:  CALL   122
05A5:  BSF    03.5
05A6:  BSF    03.6
05A7:  INCF   10,F
05A8:  MOVWF  77
05A9:  BCF    03.5
05AA:  BCF    03.6
05AB:  BTFSS  0C.4
05AC:  GOTO   5AB
05AD:  MOVWF  19
05AE:  MOVLW  0D
05AF:  BSF    03.5
05B0:  BSF    03.6
05B1:  SUBWF  10,W
05B2:  BTFSS  03.2
05B3:  GOTO   5A1
05B4:  MOVLW  05
05B5:  MOVWF  14
05B6:  BCF    03.5
05B7:  BCF    03.6
05B8:  CALL   3D8
05B9:  CALL   4FF
05BA:  CALL   3EB
.................... 	_Turn_Off_All(); 
05BB:  CALL   230
.................... } 
05BC:  BSF    0A.3
05BD:  BCF    0A.4
05BE:  GOTO   096 (RETURN)
....................  
.................... void _Display() 
.................... { 
.................... 	_Blank(); 
*
04FF:  CALL   3EB
.................... 	lcd_gotoxy(1,1); 
0500:  MOVLW  01
0501:  BSF    03.5
0502:  BSF    03.6
0503:  MOVWF  1F
0504:  MOVWF  20
0505:  BCF    03.5
0506:  BCF    03.6
0507:  CALL   374
.................... 	printf(lcd_putc,"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",sms[0],sms[1],sms[2],sms[3],sms[4],sms[5],sms[6],sms[7],	sms[8],sms[9],sms[10],sms[11],sms[12],sms[13],sms[14],sms[15]); 
0508:  BSF    03.6
0509:  MOVF   10,W
050A:  BSF    03.5
050B:  MOVWF  1E
050C:  BCF    03.5
050D:  BCF    03.6
050E:  CALL   39B
050F:  BSF    03.6
0510:  MOVF   11,W
0511:  BSF    03.5
0512:  MOVWF  1E
0513:  BCF    03.5
0514:  BCF    03.6
0515:  CALL   39B
0516:  BSF    03.6
0517:  MOVF   12,W
0518:  BSF    03.5
0519:  MOVWF  1E
051A:  BCF    03.5
051B:  BCF    03.6
051C:  CALL   39B
051D:  BSF    03.6
051E:  MOVF   13,W
051F:  BSF    03.5
0520:  MOVWF  1E
0521:  BCF    03.5
0522:  BCF    03.6
0523:  CALL   39B
0524:  BSF    03.6
0525:  MOVF   14,W
0526:  BSF    03.5
0527:  MOVWF  1E
0528:  BCF    03.5
0529:  BCF    03.6
052A:  CALL   39B
052B:  BSF    03.6
052C:  MOVF   15,W
052D:  BSF    03.5
052E:  MOVWF  1E
052F:  BCF    03.5
0530:  BCF    03.6
0531:  CALL   39B
0532:  BSF    03.6
0533:  MOVF   16,W
0534:  BSF    03.5
0535:  MOVWF  1E
0536:  BCF    03.5
0537:  BCF    03.6
0538:  CALL   39B
0539:  BSF    03.6
053A:  MOVF   17,W
053B:  BSF    03.5
053C:  MOVWF  1E
053D:  BCF    03.5
053E:  BCF    03.6
053F:  CALL   39B
0540:  BSF    03.6
0541:  MOVF   18,W
0542:  BSF    03.5
0543:  MOVWF  1E
0544:  BCF    03.5
0545:  BCF    03.6
0546:  CALL   39B
0547:  BSF    03.6
0548:  MOVF   19,W
0549:  BSF    03.5
054A:  MOVWF  1E
054B:  BCF    03.5
054C:  BCF    03.6
054D:  CALL   39B
054E:  BSF    03.6
054F:  MOVF   1A,W
0550:  BSF    03.5
0551:  MOVWF  1E
0552:  BCF    03.5
0553:  BCF    03.6
0554:  CALL   39B
0555:  BSF    03.6
0556:  MOVF   1B,W
0557:  BSF    03.5
0558:  MOVWF  1E
0559:  BCF    03.5
055A:  BCF    03.6
055B:  CALL   39B
055C:  BSF    03.6
055D:  MOVF   1C,W
055E:  BSF    03.5
055F:  MOVWF  1E
0560:  BCF    03.5
0561:  BCF    03.6
0562:  CALL   39B
0563:  BSF    03.6
0564:  MOVF   1D,W
0565:  BSF    03.5
0566:  MOVWF  1E
0567:  BCF    03.5
0568:  BCF    03.6
0569:  CALL   39B
056A:  BSF    03.6
056B:  MOVF   1E,W
056C:  BSF    03.5
056D:  MOVWF  1E
056E:  BCF    03.5
056F:  BCF    03.6
0570:  CALL   39B
0571:  BSF    03.6
0572:  MOVF   1F,W
0573:  BSF    03.5
0574:  MOVWF  1E
0575:  BCF    03.5
0576:  BCF    03.6
0577:  CALL   39B
.................... 	_Delay(10);	 
0578:  MOVLW  0A
0579:  BSF    03.5
057A:  BSF    03.6
057B:  MOVWF  14
057C:  BCF    03.5
057D:  BCF    03.6
057E:  CALL   3D8
.................... 	_Reset_SMS(); 
057F:  CALL   4DE
.................... } 
0580:  RETLW  00
....................  
.................... void _Blank() 
.................... { 
.................... 	lcd_putc('\f');_Delay(1);	 
*
03EB:  MOVLW  0C
03EC:  BSF    03.5
03ED:  BSF    03.6
03EE:  MOVWF  1E
03EF:  BCF    03.5
03F0:  BCF    03.6
03F1:  CALL   39B
03F2:  MOVLW  01
03F3:  BSF    03.5
03F4:  BSF    03.6
03F5:  MOVWF  14
03F6:  BCF    03.5
03F7:  BCF    03.6
03F8:  CALL   3D8
.................... } 
03F9:  RETLW  00
....................  
.................... void _Reset_Buffer(int time) 
.................... { 
.................... 	int k,n; 
.................... 	for(n=0;n<time;n++) 
.................... 	{ 
.................... 		for(k=0;k<90;k++) 
.................... 		{ 
.................... 			sms[k]='\0'; 
.................... 		} 
.................... 		c1=c2=c3=c4='\0'; 
.................... 		new_sms=0; 
.................... 		index=0; 
.................... 		interrupt=0; 
.................... 		i=j=k=0;	 
.................... 		_Delay(1); 
.................... 	} 
.................... 	_Blank(); 
.................... } 
....................  
.................... void _Status_1() 
.................... { 
.................... 	if(INPUT(PIN_C0)==0) 
*
063D:  BSF    38.0
063E:  MOVF   38,W
063F:  BSF    03.5
0640:  MOVWF  07
0641:  BCF    03.5
0642:  BTFSC  07.0
0643:  GOTO   647
.................... 	{ 
.................... 		st[0]='#'; 
0644:  MOVLW  23
0645:  MOVWF  34
.................... 	} 
.................... 	else  
0646:  GOTO   649
.................... 	{ 
.................... 		st[0]='0'; 
0647:  MOVLW  30
0648:  MOVWF  34
.................... 	} 
.................... } 
0649:  BSF    0A.3
064A:  BCF    0A.4
064B:  GOTO   0BD (RETURN)
....................  
.................... void _Status_2() 
.................... { 
.................... 	if(INPUT(PIN_C1)==0) 
064C:  BSF    38.1
064D:  MOVF   38,W
064E:  BSF    03.5
064F:  MOVWF  07
0650:  BCF    03.5
0651:  BTFSC  07.1
0652:  GOTO   656
.................... 	{ 
.................... 		st[1]='#'; 
0653:  MOVLW  23
0654:  MOVWF  35
.................... 	} 
.................... 	else 
0655:  GOTO   658
.................... 	{ 
.................... 		st[1]='0'; 
0656:  MOVLW  30
0657:  MOVWF  35
.................... 	} 
.................... } 
0658:  BSF    0A.3
0659:  BCF    0A.4
065A:  GOTO   0C0 (RETURN)
....................  
.................... void _Status_3() 
.................... { 
.................... 	if(INPUT(PIN_C2)==0) 
065B:  BSF    38.2
065C:  MOVF   38,W
065D:  BSF    03.5
065E:  MOVWF  07
065F:  BCF    03.5
0660:  BTFSC  07.2
0661:  GOTO   665
.................... 	{ 
.................... 		st[2]='#'; 
0662:  MOVLW  23
0663:  MOVWF  36
.................... 	} 
.................... 	else  
0664:  GOTO   667
.................... 	{ 
.................... 		st[2]='0'; 
0665:  MOVLW  30
0666:  MOVWF  36
.................... 	} 
.................... } 
0667:  BSF    0A.3
0668:  BCF    0A.4
0669:  GOTO   0C3 (RETURN)
....................  
.................... void _Status_4() 
.................... { 
.................... 	if(INPUT(PIN_C3)==0) 
066A:  BSF    38.3
066B:  MOVF   38,W
066C:  BSF    03.5
066D:  MOVWF  07
066E:  BCF    03.5
066F:  BTFSC  07.3
0670:  GOTO   674
.................... 	{ 
.................... 		st[3]='#'; 
0671:  MOVLW  23
0672:  MOVWF  37
.................... 	} 
.................... 	else 
0673:  GOTO   676
.................... 	{ 
.................... 		st[3]='0'; 
0674:  MOVLW  30
0675:  MOVWF  37
.................... 	} 
.................... } 
0676:  BSF    0A.3
0677:  BCF    0A.4
0678:  GOTO   0C6 (RETURN)
....................  
.................... void _Turn_Off_All() 
.................... { 
.................... 	int i=0; 
*
0230:  BSF    03.6
0231:  CLRF   6A
.................... 	output_high(PIN_C0); 
0232:  BCF    03.6
0233:  BCF    38.0
0234:  MOVF   38,W
0235:  BSF    03.5
0236:  MOVWF  07
0237:  BCF    03.5
0238:  BSF    07.0
.................... 	output_high(PIN_C1); 
0239:  BCF    38.1
023A:  MOVF   38,W
023B:  BSF    03.5
023C:  MOVWF  07
023D:  BCF    03.5
023E:  BSF    07.1
.................... 	output_high(PIN_C2); 
023F:  BCF    38.2
0240:  MOVF   38,W
0241:  BSF    03.5
0242:  MOVWF  07
0243:  BCF    03.5
0244:  BSF    07.2
.................... 	output_high(PIN_C3); 
0245:  BCF    38.3
0246:  MOVF   38,W
0247:  BSF    03.5
0248:  MOVWF  07
0249:  BCF    03.5
024A:  BSF    07.3
.................... 	output_high(PIN_C4); 
024B:  BCF    38.4
024C:  MOVF   38,W
024D:  BSF    03.5
024E:  MOVWF  07
024F:  BCF    03.5
0250:  BSF    07.4
.................... 	output_high(PIN_C5); 
0251:  BCF    38.5
0252:  MOVF   38,W
0253:  BSF    03.5
0254:  MOVWF  07
0255:  BCF    03.5
0256:  BSF    07.5
.................... 	output_high(PIN_D0); 
0257:  BSF    03.5
0258:  BCF    08.0
0259:  BCF    03.5
025A:  BSF    08.0
.................... 	output_e(0xFF); 
025B:  BSF    03.5
025C:  BCF    09.0
025D:  BCF    09.1
025E:  BCF    09.2
025F:  MOVLW  FF
0260:  BCF    03.5
0261:  MOVWF  09
.................... 	for(i=0;i<4;i++) 
0262:  BSF    03.6
0263:  CLRF   6A
0264:  MOVF   6A,W
0265:  SUBLW  03
0266:  BTFSS  03.0
0267:  GOTO   270
.................... 	{st[i]='0';} 
0268:  MOVLW  34
0269:  ADDWF  6A,W
026A:  MOVWF  04
026B:  BCF    03.7
026C:  MOVLW  30
026D:  MOVWF  00
026E:  INCF   6A,F
026F:  GOTO   264
.................... } 
0270:  BCF    03.6
0271:  RETLW  00
....................  
.................... void _Turn_On_All() 
.................... { 
.................... 	int i=0; 
*
072D:  BSF    03.6
072E:  CLRF   6A
.................... 	output_low(PIN_C0); 
072F:  BCF    03.6
0730:  BCF    38.0
0731:  MOVF   38,W
0732:  BSF    03.5
0733:  MOVWF  07
0734:  BCF    03.5
0735:  BCF    07.0
.................... 	output_low(PIN_C1); 
0736:  BCF    38.1
0737:  MOVF   38,W
0738:  BSF    03.5
0739:  MOVWF  07
073A:  BCF    03.5
073B:  BCF    07.1
.................... 	output_low(PIN_C2); 
073C:  BCF    38.2
073D:  MOVF   38,W
073E:  BSF    03.5
073F:  MOVWF  07
0740:  BCF    03.5
0741:  BCF    07.2
.................... 	output_low(PIN_C3); 
0742:  BCF    38.3
0743:  MOVF   38,W
0744:  BSF    03.5
0745:  MOVWF  07
0746:  BCF    03.5
0747:  BCF    07.3
.................... 	output_low(PIN_C4); 
0748:  BCF    38.4
0749:  MOVF   38,W
074A:  BSF    03.5
074B:  MOVWF  07
074C:  BCF    03.5
074D:  BCF    07.4
.................... 	output_low(PIN_C5); 
074E:  BCF    38.5
074F:  MOVF   38,W
0750:  BSF    03.5
0751:  MOVWF  07
0752:  BCF    03.5
0753:  BCF    07.5
.................... 	output_low(PIN_D0); 
0754:  BSF    03.5
0755:  BCF    08.0
0756:  BCF    03.5
0757:  BCF    08.0
.................... 	output_e(0x00); 
0758:  BSF    03.5
0759:  BCF    09.0
075A:  BCF    09.1
075B:  BCF    09.2
075C:  BCF    03.5
075D:  CLRF   09
.................... 	for(i=0;i<4;i++) 
075E:  BSF    03.6
075F:  CLRF   6A
0760:  MOVF   6A,W
0761:  SUBLW  03
0762:  BTFSS  03.0
0763:  GOTO   76C
.................... 	{st[i]='#';} 
0764:  MOVLW  34
0765:  ADDWF  6A,W
0766:  MOVWF  04
0767:  BCF    03.7
0768:  MOVLW  23
0769:  MOVWF  00
076A:  INCF   6A,F
076B:  GOTO   760
.................... } 
076C:  BCF    03.6
076D:  BSF    0A.3
076E:  BCF    0A.4
076F:  GOTO   397 (RETURN)

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
